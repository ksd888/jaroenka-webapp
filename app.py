import streamlit as st
import datetime
from pytz import timezone
import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
import matplotlib.pyplot as plt
import time

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô CSS
st.markdown("""
<style>
/* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏ß ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏î‡∏≥‡πÄ‡∏Ç‡πâ‡∏° */
body, .main, .block-container {
    background-color: #ffffff !important;
    color: #000000 !important;
    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
}

/* ‡∏õ‡∏∏‡πà‡∏° */
.stButton > button {
    color: white !important;
    background-color: #007aff !important;
    font-weight: bold;
    border: none;
    border-radius: 10px;
    padding: 0.5em 1.2em;
    font-size: 16px;
    transition: all 0.3s ease;
}
.stButton > button:hover {
    background-color: #0062cc !important;
    transform: scale(1.02);
}

/* Input */
input, textarea, .stTextInput > div > div > input, .stNumberInput input {
    background-color: #f2f2f7 !important;
    color: #000000 !important;
    font-weight: bold !important;
    font-size: 18px;
    border-radius: 8px !important;
    padding: 10px !important;
}

/* Custom Checkbox UI */
.stCheckbox > div {
    display: flex;
    align-items: center;
}
.stCheckbox input[type="checkbox"] {
    display: none;
}
.stCheckbox > div > label {
    position: relative;
    padding-left: 28px;
    cursor: pointer;
    font-size: 18px;
    color: #000000 !important;
    font-weight: bold;
}
.stCheckbox > div > label::before {
    content: "";
    position: absolute;
    left: 0;
    top: 2px;
    width: 20px;
    height: 20px;
    border: 2px solid #000;
    background-color: white;
    border-radius: 4px;
}
.stCheckbox input[type="checkbox"]:checked + label::before {
    background-color: #007aff;
    border-color: #007aff;
}
.stCheckbox input[type="checkbox"]:checked + label::after {
    content: "‚úì";
    position: absolute;
    left: 5px;
    top: 0px;
    font-size: 16px;
    color: white;
    font-weight: bold;
}

/* Alert ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î */
.stMarkdown span[style*="color:red"] {
    font-size: 20px !important;
    font-weight: bold !important;
    padding: 5px;
    border-radius: 5px;
}

/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */
.css-1kyxreq {
    background-color: #f9f9f9 !important;
    border-radius: 10px !important;
    padding: 15px !important;
    margin-bottom: 15px !important;
}
</style>
""", unsafe_allow_html=True)

# Initialize session state with proper checks
def initialize_session_state():
    if 'page' not in st.session_state:
        st.session_state.page = "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
    if 'cart' not in st.session_state:
        st.session_state.cart = []
    if 'quantities' not in st.session_state:
        st.session_state.quantities = {}
    if 'paid_input' not in st.session_state:
        st.session_state.paid_input = 0.0
    if 'last_paid_click' not in st.session_state:
        st.session_state.last_paid_click = 0
    if 'reset_search_items' not in st.session_state:
        st.session_state.reset_search_items = False
    if 'prev_paid_input' not in st.session_state:
        st.session_state.prev_paid_input = 0.0
    if 'last_update' not in st.session_state:
        st.session_state.last_update = time.time()

initialize_session_state()

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
@st.cache_resource
def connect_google_sheets():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    credentials = Credentials.from_service_account_info(st.secrets["GCP_SERVICE_ACCOUNT"], scopes=scope)
    gc = gspread.authorize(credentials)
    sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
    return sheet

try:
    sheet = connect_google_sheets()
    worksheet = sheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
    summary_ws = sheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
    iceflow_sheet = sheet.worksheet("iceflow")
except Exception as e:
    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets: {str(e)}")
    st.stop()

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
def load_and_clean_data(worksheet):
    df = pd.DataFrame(worksheet.get_all_records())
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] = df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].str.strip()
    df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] = pd.to_numeric(df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"], errors="coerce").fillna(0)
    df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"] = pd.to_numeric(df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"], errors="coerce").fillna(0)
    df["‡πÄ‡∏Ç‡πâ‡∏≤"] = pd.to_numeric(df["‡πÄ‡∏Ç‡πâ‡∏≤"], errors="coerce").fillna(0)
    df["‡∏≠‡∏≠‡∏Å"] = pd.to_numeric(df["‡∏≠‡∏≠‡∏Å"], errors="coerce").fillna(0)
    df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"] = pd.to_numeric(df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"], errors="coerce").fillna(0)
    return df

df = load_and_clean_data(worksheet)

# Helper functions
def safe_key(text): 
    return text.replace(" ", "_").replace(".", "_").replace("/", "_").lower()

def safe_int(val): 
    return int(pd.to_numeric(val, errors="coerce") or 0)

def safe_float(val): 
    return float(pd.to_numeric(val, errors="coerce") or 0.0)

def increase_quantity(p): 
    if p in st.session_state.quantities:
        st.session_state.quantities[p] += 1
    else:
        st.session_state.quantities[p] = 1

def decrease_quantity(p): 
    if p in st.session_state.quantities:
        st.session_state.quantities[p] = max(1, st.session_state.quantities[p] - 1)
    else:
        st.session_state.quantities[p] = 1

def add_money(amount: int):
    try:
        current = float(st.session_state.get('paid_input', 0.0))
        st.session_state.paid_input = current + amount
        st.session_state.last_paid_click = amount
        st.session_state.prev_paid_input = current + amount
    except Exception as e:
        st.error(f"Error adding money: {str(e)}")

# ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
st.markdown("### üöÄ ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
col1, col2, col3 = st.columns(3)
with col1:
    if st.button("üè™ ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
        st.session_state.page = "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
        st.rerun()
with col2:
    if st.button("üßä ‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"):
        st.session_state.page = "‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"
        st.rerun()
with col3:
    if st.button("üìä Dashboard"):
        st.session_state.page = "Dashboard"
        st.rerun()

now = datetime.datetime.now(timezone("Asia/Bangkok")).strftime("%Y-%m-%d %H:%M:%S")

# ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
if st.session_state.page == "Dashboard":
    st.title("üìä Dashboard ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
    def load_sales_data():
        try:
            sales_df = pd.DataFrame(summary_ws.get_all_records())
            sales_df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'] = pd.to_datetime(sales_df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'])
            sales_df['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'] = sales_df['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'].astype(str)
            sales_df['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'] = pd.to_numeric(sales_df['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'], errors='coerce').fillna(0)
            sales_df['‡∏Å‡∏≥‡πÑ‡∏£'] = pd.to_numeric(sales_df['‡∏Å‡∏≥‡πÑ‡∏£'], errors='coerce').fillna(0)
            sales_df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'] = sales_df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'].astype(str)
            return sales_df
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: {str(e)}")
            return pd.DataFrame()

    sales_df = load_sales_data()
    
    if not sales_df.empty:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
        col1, col2, col3 = st.columns(3)
        with col1:
            total_sales = sales_df['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'].sum()
            st.metric("üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{total_sales:,.2f} ‡∏ö‡∏≤‡∏ó")
        with col2:
            total_profit = sales_df['‡∏Å‡∏≥‡πÑ‡∏£'].sum()
            st.metric("üü¢ ‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°", f"{total_profit:,.2f} ‡∏ö‡∏≤‡∏ó")
        with col3:
            avg_sale = total_sales / len(sales_df) if len(sales_df) > 0 else 0
            st.metric("üìä ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", f"{avg_sale:,.2f} ‡∏ö‡∏≤‡∏ó")
        
        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
        st.subheader("üìà ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        daily_sales = sales_df.groupby(sales_df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'].dt.date)['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'].sum().reset_index()
        
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.plot(daily_sales['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'], daily_sales['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'], marker='o', color='#007aff')
        ax.set_title('‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô')
        ax.set_xlabel('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà')
        ax.set_ylabel('‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)')
        ax.grid(True)
        st.pyplot(fig)
        
        # ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ
        st.subheader("üèÜ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ")
        if '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' in sales_df.columns:
            top_products = sales_df['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'].value_counts().head(10)
            st.bar_chart(top_products)
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")

# ‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
elif st.session_state.page == "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
    st.title("üßÉ ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
    product_names = df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist()
    
    # ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    search_term = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", help="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", key="search_term")
    filtered_products = [p for p in product_names if search_term.lower() in p.lower()] if search_term else product_names
    
    selected_product = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", [""] + filtered_products, key="product_select")
    
    if selected_product:
        if selected_product not in st.session_state.quantities:
            st.session_state.quantities[selected_product] = 1
        
        qty = st.session_state.quantities[selected_product]
        row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == selected_product]
        stock = int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"].values[0]) if not row.empty else 0
        
        st.markdown(f"**{selected_product}**")
        col1, col2, col3, col4 = st.columns([1, 1, 1, 2])
        with col1: 
            st.button("‚ûñ", key=f"dec_{safe_key(selected_product)}", on_click=decrease_quantity, args=(selected_product,))
        with col2: 
            st.markdown(f"<div style='text-align:center; font-size:24px'>{qty}</div>", unsafe_allow_html=True)
        with col3: 
            st.button("‚ûï", key=f"inc_{safe_key(selected_product)}", on_click=increase_quantity, args=(selected_product,))
        with col4:
            stock_color = "red" if stock < 3 else "green"
            st.markdown(f"<span style='color:{stock_color}; font-size:18px; font-weight:bold'>üì¶ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {stock} ‡∏ä‡∏¥‡πâ‡∏ô</span>", unsafe_allow_html=True)

        if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", type="primary", key="add_to_cart"):
            qty = safe_int(st.session_state.quantities[selected_product])
            if qty > 0:
                if stock >= qty:
                    st.session_state.cart.append((selected_product, qty))
                    st.success("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
                    st.session_state.quantities[selected_product] = 1
                    st.rerun()
                else:
                    st.error(f"‚ö†Ô∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {stock} ‡∏ä‡∏¥‡πâ‡∏ô)")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
    total_price, total_profit = 0, 0
    
    if not st.session_state.cart:
        st.info("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤")
    else:
        for idx, (item, qty) in enumerate(st.session_state.cart):
            row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item].iloc[0]
            price, cost = safe_float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]), safe_float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"])
            subtotal, profit = qty * price, qty * (price - cost)
            total_price += subtotal
            total_profit += profit
            
            col1, col2 = st.columns([4, 1])
            with col1:
                st.write(f"- {item} x {qty} = {subtotal:.2f} ‡∏ö‡∏≤‡∏ó")
            with col2:
                if st.button("üóëÔ∏è", key=f"remove_{idx}"):
                    st.session_state.cart.pop(idx)
                    st.rerun()

    # ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
    st.subheader("üí∞ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
    paid_input = st.number_input(
        "‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", 
        value=float(st.session_state.get('paid_input', 0.0)), 
        step=1.0,
        min_value=0.0,
        key="paid_input_widget"
    )

    # Update session state only if the value changed
    if paid_input != st.session_state.prev_paid_input:
        try:
            st.session_state.paid_input = paid_input
            st.session_state.prev_paid_input = paid_input
        except Exception as e:
            st.error(f"Error updating payment amount: {str(e)}")
    
    # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πà‡∏ß‡∏ô
    st.write("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πà‡∏ß‡∏ô:")
    col1, col2, col3 = st.columns(3)
    with col1: st.button("20", on_click=lambda: add_money(20), key="add_20")
    with col2: st.button("50", on_click=lambda: add_money(50), key="add_50")
    with col3: st.button("100", on_click=lambda: add_money(100), key="add_100")
    col4, col5 = st.columns(2)
    with col4: st.button("500", on_click=lambda: add_money(500), key="add_500")
    with col5: st.button("1000", on_click=lambda: add_money(1000), key="add_1000")
    
    if st.session_state.last_paid_click:
        if st.button(f"‚ûñ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å {st.session_state.last_paid_click}", key="cancel_last"):
            try:
                st.session_state.paid_input -= st.session_state.last_paid_click
                st.session_state.prev_paid_input = st.session_state.paid_input
                st.session_state.last_paid_click = 0
                st.rerun()
            except Exception as e:
                st.error(f"Error canceling last payment: {str(e)}")

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î
    st.info(f"üì¶ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total_price:,.2f} ‡∏ö‡∏≤‡∏ó | üü¢ ‡∏Å‡∏≥‡πÑ‡∏£: {total_profit:,.2f} ‡∏ö‡∏≤‡∏ó")
    if st.session_state.paid_input >= total_price:
        st.success(f"üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {st.session_state.paid_input - total_price:,.2f} ‡∏ö‡∏≤‡∏ó")
    else:
        st.warning(f"üí∏ ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ (‡∏Ç‡∏≤‡∏î: {total_price - st.session_state.paid_input:,.2f} ‡∏ö‡∏≤‡∏ó)")

    # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
    if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢", type="primary", disabled=not st.session_state.cart, key="confirm_sale"):
        try:
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢..."):
                for item, qty in st.session_state.cart:
                    index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item].index[0]
                    row = df.loc[index]
                    idx_in_sheet = index + 2
                    new_out = safe_int(row["‡∏≠‡∏≠‡∏Å"]) + qty
                    new_left = safe_int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]) - qty
                    worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏≠‡∏≠‡∏Å") + 1, new_out)
                    worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ") + 1, new_left)

                summary_ws.append_row([
                    now,
                    ", ".join([f"{i} x {q}" for i, q in st.session_state.cart]),
                    total_price,
                    total_profit,
                    st.session_state.paid_input,
                    st.session_state.paid_input - total_price,
                    "drink"
                ])
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô cache
                st.cache_data.clear()
                
                st.session_state.cart = []
                st.session_state.paid_input = 0.0
                st.session_state.prev_paid_input = 0.0
                st.session_state.last_paid_click = 0
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                time.sleep(1)
                st.rerun()
        except Exception as e:
            st.error(f"Error confirming sale: {str(e)}")

    # ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    with st.expander("üì¶ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", expanded=False):
        tab1, tab2, tab3 = st.tabs(["‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î"])
        
        with tab1:
            restock_item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", product_names, key="restock_select")
            restock_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°", min_value=1, step=1, key="restock_qty")
            if st.button("üì• ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", key="confirm_restock"):
                index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == restock_item].index[0]
                idx_in_sheet = index + 2
                row = df.loc[index]
                new_in = safe_int(row["‡πÄ‡∏Ç‡πâ‡∏≤"]) + restock_qty
                new_left = safe_int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]) + restock_qty
                worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡πÄ‡∏Ç‡πâ‡∏≤") + 1, new_in)
                worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ") + 1, new_left)
                st.success(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° {restock_item} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {restock_qty} ‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                st.cache_data.clear()
                st.rerun()
        
        with tab2:
            edit_item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", product_names, key="edit_select")
            index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == edit_item].index[0]
            idx_in_sheet = index + 2
            row = df.loc[index]
            
            col1, col2 = st.columns(2)
            with col1:
                new_price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢", value=safe_float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]), key="edit_price")
            with col2:
                new_cost = st.number_input("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô", value=safe_float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]), key="edit_cost")
            
            new_stock = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ", value=safe_int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]), key="edit_stock", step=1)
            
            if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", key="save_edit"):
                worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢") + 1, new_price)
                worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô") + 1, new_cost)
                worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ") + 1, new_stock)
                st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {edit_item} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                st.cache_data.clear()
                st.rerun()
        
        with tab3:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏¢‡∏≠‡∏î '‡πÄ‡∏Ç‡πâ‡∏≤' ‡πÅ‡∏•‡∏∞ '‡∏≠‡∏≠‡∏Å' ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
            if st.button("üîÅ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)", type="secondary", key="reset_counts"):
                num_rows = len(df)
                worksheet.batch_update([
                    {"range": f"E2:E{num_rows+1}", "values": [[0]] * num_rows},
                    {"range": f"G2:G{num_rows+1}", "values": [[0]] * num_rows}
                ])
                st.success("‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î '‡πÄ‡∏Ç‡πâ‡∏≤' ‡πÅ‡∏•‡∏∞ '‡∏≠‡∏≠‡∏Å' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà")
                st.cache_data.clear()
                st.rerun()

elif st.session_state.page == "‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á":
    def reset_ice_session_state():
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å"""
        ice_types = ["‡πÇ‡∏°‡πà", "‡∏´‡∏•‡∏≠‡∏î‡πÉ‡∏´‡∏ç‡πà", "‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡πá‡∏Å", "‡∏Å‡πâ‡∏≠‡∏ô"]
        for ice_type in ice_types:
            st.session_state.pop(f"in_{ice_type}", None)
            st.session_state.pop(f"sell_out_{ice_type}", None)
            st.session_state.pop(f"melted_{ice_type}", None)

    st.title("üßä ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
    
    @st.cache_data(ttl=60)
    def load_ice_data():
        try:
            records = iceflow_sheet.get_all_records()
            if not records:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
                records = [
                    {"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": "", "‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á": "‡πÇ‡∏°‡πà", "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤": 0, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å": 0, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢": 0, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô": 0, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢": 0, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢": 0, "‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°": 0, "‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥": 0},
                    {"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": "", "‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á": "‡∏´‡∏•‡∏≠‡∏î‡πÉ‡∏´‡∏ç‡πà", "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤": 0, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å": 0, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢": 0, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô": 0, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢": 0, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢": 0, "‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°": 0, "‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥": 0},
                    {"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": "", "‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á": "‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡πá‡∏Å", "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤": 0, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å": 0, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢": 0, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô": 0, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢": 0, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢": 0, "‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°": 0, "‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥": 0},
                    {"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": "", "‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á": "‡∏Å‡πâ‡∏≠‡∏ô", "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤": 0, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å": 0, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢": 0, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô": 0, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢": 0, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢": 0, "‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°": 0, "‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥": 0}
                ]
            return pd.DataFrame(records)
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á: {str(e)}")
            return pd.DataFrame()
    
    df_ice = load_ice_data()
    
    if df_ice.empty:
        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
        st.stop()
    
    today_str = datetime.datetime.now(timezone("Asia/Bangkok")).strftime("%-d/%-m/%Y")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
    if not df_ice.empty and (df_ice["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].iloc[0] != today_str or st.session_state.get("force_rerun", False)):
        try:
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà..."):
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤ ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà)
                new_rows = []
                for ice_type in ["‡πÇ‡∏°‡πà", "‡∏´‡∏•‡∏≠‡∏î‡πÉ‡∏´‡∏ç‡πà", "‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡πá‡∏Å", "‡∏Å‡πâ‡∏≠‡∏ô"]:
                    row = {
                        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": today_str,
                        "‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á": ice_type,
                        "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤": 0,
                        "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å": 0,
                        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢": 0,
                        "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô": 0,
                        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢": df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] == ice_type]["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"].values[0] if not df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] == ice_type].empty else 0,
                        "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢": df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] == ice_type]["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"].values[0] if not df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] == ice_type].empty else 0,
                        "‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°": 0,
                        "‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥": 0
                    }
                    new_rows.append(row)
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó
                iceflow_sheet.append_rows([list(row.values()) for row in new_rows])
                
                st.info("üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")
                reset_ice_session_state()
                st.session_state.force_rerun = False
                st.cache_data.clear()
                time.sleep(1)
                st.rerun()
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
    
    ice_types = ["‡πÇ‡∏°‡πà", "‡∏´‡∏•‡∏≠‡∏î‡πÉ‡∏´‡∏ç‡πà", "‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡πá‡∏Å", "‡∏Å‡πâ‡∏≠‡∏ô"]
    
    # ‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á
    st.markdown("### üì¶ ‡πÇ‡∏ã‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á")
    cols = st.columns(4)

    for i, ice_type in enumerate(ice_types):
        row = df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] == ice_type].iloc[-1] if not df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] == ice_type].empty else None
        if row is not None:
            default_val = safe_int(row["‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"])
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å session state ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            current_value = st.session_state.get(f"in_{ice_type}", default_val)
            
            with cols[i]:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á input field ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ current_value
                new_value = st.number_input(
                    f"üì• {ice_type}", 
                    min_value=0, 
                    value=current_value,
                    key=f"in_{ice_type}_input"
                )
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô session state
                st.session_state[f"in_{ice_type}"] = new_value
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                received = new_value
                sold = safe_int(row["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"])
                melted = safe_int(row["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"])
                remaining = received - sold - melted
                
                st.metric("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", f"{remaining} ‡∏ñ‡∏∏‡∏á")
        else:
            st.warning(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡∏ä‡∏ô‡∏¥‡∏î '{ice_type}'")

    # ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á
    st.markdown("### üí∏ ‡πÇ‡∏ã‡∏ô‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á")
    total_income = 0
    total_profit = 0

    cols = st.columns(4)
    for i, ice_type in enumerate(ice_types):
        row = df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] == ice_type].iloc[-1] if not df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] == ice_type].empty else None
        if row is not None:
            price = safe_float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
            cost = safe_float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
            default_val = safe_int(row["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"])
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å session state ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            current_value = st.session_state.get(f"sell_out_{ice_type}", default_val)
            
            with cols[i]:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á input field ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ current_value
                new_value = st.number_input(
                    f"üßä ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å {ice_type}", 
                    min_value=0, 
                    value=current_value,
                    key=f"sell_out_{ice_type}_input"
                )
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô session state
                st.session_state[f"sell_out_{ice_type}"] = new_value
                
                melted_qty = safe_int(row["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"])
                income = new_value * price
                profit = (new_value * (price - cost)) - (melted_qty * cost)
                
                total_income += income
                total_profit += profit

    # ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏∞‡∏•‡∏≤‡∏¢
    st.markdown("### üßä ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏∞‡∏•‡∏≤‡∏¢")
    melted_cols = st.columns(4)
    for i, ice_type in enumerate(ice_types):
        row = df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] == ice_type].iloc[-1] if not df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] == ice_type].empty else None
        if row is not None:
            with melted_cols[i]:
                default_melted = safe_int(row["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"])
                melted_qty = st.number_input(
                    f"‡∏•‡∏∞‡∏•‡∏≤‡∏¢ {ice_type}", 
                    min_value=0, 
                    value=st.session_state.get(f"melted_{ice_type}", default_melted),
                    key=f"melted_{ice_type}_input"
                )
                st.session_state[f"melted_{ice_type}"] = melted_qty

    # ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
    if st.button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á", type="primary", key="save_ice_sale"):
        try:
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢..."):
                # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                new_rows = []
                for ice_type in ice_types:
                    row_data = {
                        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": today_str,
                        "‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á": ice_type,
                        "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤": st.session_state.get(f"in_{ice_type}", 0),
                        "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å": st.session_state.get(f"sell_out_{ice_type}", 0),
                        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢": st.session_state.get(f"melted_{ice_type}", 0),
                        "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô": 0,  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
                        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢": df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] == ice_type]["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"].values[0] if not df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] == ice_type].empty else 0,
                        "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢": df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] == ice_type]["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"].values[0] if not df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] == ice_type].empty else 0,
                        "‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°": 0,  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
                        "‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥": 0   # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
                    }
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
                    row_data["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô"] = row_data["‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"] - row_data["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"] - row_data["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"]
                    row_data["‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°"] = row_data["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"] * row_data["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"]
                    row_data["‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥"] = (row_data["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"] * (row_data["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] - row_data["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])) - (row_data["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"] * row_data["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
                    
                    new_rows.append(row_data)
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó iceflow
                iceflow_sheet.append_rows([list(row.values()) for row in new_rows])
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
                for row in new_rows:
                    summary_ws.append_row([
                        row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"],
                        row["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"],
                        row["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"],
                        row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"],
                        row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"],
                        row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] - row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"],
                        row["‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°"],
                        row["‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥"],
                        "ice"
                    ])
                
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                reset_ice_session_state()
                st.session_state.force_rerun = True
                st.cache_data.clear()
                time.sleep(1)
                st.rerun()
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
        
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
    st.markdown("### üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{total_income:,.2f} ‡∏ö‡∏≤‡∏ó")
    with col2:
        st.metric("üü¢ ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥", f"{total_profit:,.2f} ‡∏ö‡∏≤‡∏ó")
