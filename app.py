import streamlit as st
import pandas as pd
import datetime
import gspread
from google.oauth2 import service_account
from reportlab.pdfgen import canvas
from io import BytesIO
import base64

# =================== ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheet ======================
credentials = service_account.Credentials.from_service_account_info(
    st.secrets["GCP_SERVICE_ACCOUNT"],
    scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
)
gc = gspread.authorize(credentials)
spreadsheet = gc.open("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô‡∏õ‡∏•‡∏µ‡∏Å_GS")
sheet_main = spreadsheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
sheet_sales = spreadsheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
sheet_meta = spreadsheet.worksheet("Meta")

# =================== ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ========================
data = pd.DataFrame(sheet_main.get_all_records())
expected_columns = ["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ", "‡πÄ‡∏Ç‡πâ‡∏≤", "‡∏≠‡∏≠‡∏Å", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
missing_columns = [col for col in expected_columns if col not in data.columns]
if missing_columns:
    st.error(f"‚ùå ‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó: {missing_columns}")
    st.stop()

data["‡πÄ‡∏Ç‡πâ‡∏≤"] = pd.to_numeric(data["‡πÄ‡∏Ç‡πâ‡∏≤"], errors="coerce").fillna(0).astype(int)
data["‡∏≠‡∏≠‡∏Å"] = pd.to_numeric(data["‡∏≠‡∏≠‡∏Å"], errors="coerce").fillna(0).astype(int)
data["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"] = pd.to_numeric(data["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"], errors="coerce").fillna(0).astype(int)
data["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] = pd.to_numeric(data["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"], errors="coerce").fillna(0)
data["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"] = pd.to_numeric(data["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"], errors="coerce").fillna(0)

# =============== ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ===============
now_date = datetime.datetime.now().strftime("%Y-%m-%d")
last_date = sheet_meta.acell("B1").value
if last_date != now_date:
    data["‡πÄ‡∏Ç‡πâ‡∏≤"] = 0
    data["‡∏≠‡∏≠‡∏Å"] = 0
    sheet_meta.update("B1", now_date)
    st.info("üîÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å' ‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß")

st.title("üì¶ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô - ‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")

# ================ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ================
st.subheader("üõí ‡∏Ç‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
cart = []
with st.form("sell_form"):
    selected_items = st.multiselect("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", options=data["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist())
    for item in selected_items:
        qty = st.number_input(f"{item} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô)", min_value=0, step=1, key=item)
        if qty > 0:
            cart.append((item, qty))
    paid = st.number_input("üíµ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤ (‡∏ö‡∏≤‡∏ó)", min_value=0.0, step=1.0)
    submitted = st.form_submit_button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")

if submitted:
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    total_price = 0
    total_cost = 0
    for item, qty in cart:
        idx = data[data["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item].index[0]
        price = data.at[idx, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]
        cost = data.at[idx, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
        data.at[idx, "‡∏≠‡∏≠‡∏Å"] += qty
        total_price += price * qty
        total_cost += cost * qty
        sheet_sales.append_row([
            now, item, int(qty), float(price), float(cost),
            float(price - cost), float((price - cost) * qty)
        ])
    change = paid - total_price
    st.success(f"‚úÖ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°: {total_price:.2f} ‡∏ö‡∏≤‡∏ó | ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")

    # ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF
    pdf_buffer = BytesIO()
    c = canvas.Canvas(pdf_buffer)
    c.drawString(100, 800, "üßæ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à - ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
    c.drawString(100, 780, f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {now}")
    y = 760
    for item, qty in cart:
        c.drawString(100, y, f"{item} x {qty}")
        y -= 20
    c.drawString(100, y - 10, f"‡∏£‡∏ß‡∏°: {total_price:.2f} ‡∏ö‡∏≤‡∏ó | ‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")
    c.save()
    st.download_button("üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à", data=pdf_buffer.getvalue(), file_name="receipt.pdf")

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡∏ä‡∏µ‡∏ó
    sheet_main.update([data.columns.values.tolist()] + data.values.tolist())

# =============== ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ===============
st.subheader("‚ûï ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏π‡πâ")
add_name = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", data["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"], key="add")
add_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°", min_value=0, step=1, key="add_qty")
if st.button("‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πä‡∏≠‡∏Å"):
    idx = data[data["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == add_name].index[0]
    data.at[idx, "‡πÄ‡∏Ç‡πâ‡∏≤"] += add_qty
    sheet_main.update([data.columns.values.tolist()] + data.values.tolist())
    st.success(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° {add_name} +{add_qty} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

# =============== ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏° ===============
data["‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] = data["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] - data["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
data["‡∏Å‡∏≥‡πÑ‡∏£"] = data["‡∏≠‡∏≠‡∏Å"] * data["‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"]
total_sales = (data["‡∏≠‡∏≠‡∏Å"] * data["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]).sum()
total_profit = data["‡∏Å‡∏≥‡πÑ‡∏£"].sum()

st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
st.metric("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)", f"{total_sales:,.2f}")
st.metric("‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)", f"{total_profit:,.2f}")

# =============== ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ===============
st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
st.dataframe(data)
