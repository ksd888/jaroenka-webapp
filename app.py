import streamlit as st
import gspread
from datetime import datetime
from google.oauth2.service_account import Credentials

# ========== ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet ==========
scope = ["https://www.googleapis.com/auth/spreadsheets"]
credentials = Credentials.from_service_account_info(
    st.secrets["GCP_SERVICE_ACCOUNT"],
    scopes=scope
)
gc = gspread.authorize(credentials)
sh = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
sheet = sh.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
sales_sheet = sh.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
meta_sheet = sh.worksheet("Meta")

# ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ==========
def safe_float(value):
    try:
        return float(value)
    except (ValueError, TypeError):
        return 0.0

# ========== ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ==========
data = sheet.get_all_records()
products = [
    {
        "‡∏ä‡∏∑‡πà‡∏≠": row["‡∏ä‡∏∑‡πà‡∏≠"],
        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢": safe_float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]),
        "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô": safe_float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]),
        "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠": safe_float(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]),
        "‡πÄ‡∏Ç‡πâ‡∏≤": safe_float(row["‡πÄ‡∏Ç‡πâ‡∏≤"]),
        "‡∏≠‡∏≠‡∏Å": safe_float(row["‡∏≠‡∏≠‡∏Å"])
    }
    for row in data
]

# ========== ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ==========
now_date = datetime.now().strftime("%Y-%m-%d")
meta_sheet.update("B1", [[now_date]])

# ========== UI: Header ==========
st.title("üßä ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
st.header("üõí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

# ========== UI: Autocomplete ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ==========
product_names = [p["‡∏ä‡∏∑‡πà‡∏≠"] for p in products]
selected_names = st.multiselect("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠", product_names)

# ========== ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ==========
if "cart" not in st.session_state:
    st.session_state.cart = {}

for name in selected_names:
    col1, col2, col3 = st.columns([3,1,1])
    col1.markdown(f"**{name}**")
    if col2.button("‚ûñ", key=f"dec_{name}"):
        st.session_state.cart[name] = max(st.session_state.cart.get(name, 0) - 1, 0)
    if col3.button("‚ûï", key=f"inc_{name}"):
        st.session_state.cart[name] = st.session_state.cart.get(name, 0) + 1

# ========== ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ==========
if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"):
    for name in selected_names:
        st.session_state.cart[name] = st.session_state.cart.get(name, 0) + 1

# ========== ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ ==========
st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
total = 0
profit = 0
for name, qty in st.session_state.cart.items():
    if qty > 0:
        prod = next((p for p in products if p["‡∏ä‡∏∑‡πà‡∏≠"] == name), None)
        if prod:
            price = prod["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]
            cost = prod["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
            line_total = qty * price
            line_profit = qty * (price - cost)
            total += line_total
            profit += line_profit
            st.markdown(f"- {name} x {qty} = {line_total:.2f} ‡∏ö‡∏≤‡∏ó")

st.markdown(f"""<div style="background-color:#123456;padding:10px;border-radius:10px">
üíµ <b>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</b> {total:.2f} ‡∏ö‡∏≤‡∏ó | üü¢ <b>‡∏Å‡∏≥‡πÑ‡∏£:</b> {profit:.2f} ‡∏ö‡∏≤‡∏ó
</div>""", unsafe_allow_html=True)

# ========== ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô / ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô ==========
cash = st.number_input("üí∞ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", min_value=0.0, value=0.0, step=1.0)
change = cash - total

if change < 0:
    st.warning("üí∏ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠")
else:
    st.success(f"üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")

# ========== ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ ==========
if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    for name, qty in st.session_state.cart.items():
        if qty > 0:
            prod = next((p for p in products if p["‡∏ä‡∏∑‡πà‡∏≠"] == name), None)
            if prod:
                row_index = next(i for i, row in enumerate(data) if row["‡∏ä‡∏∑‡πà‡∏≠"] == name) + 2
                out_cell = f"G{row_index}"
                remain_cell = f"D{row_index}"
                new_out = prod["‡∏≠‡∏≠‡∏Å"] + qty
                new_remain = prod["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] - qty
                sheet.update(out_cell, new_out)
                sheet.update(remain_cell, new_remain)

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
                sales_sheet.append_row([
                    timestamp, name, qty, prod["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"], prod["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"],
                    qty * prod["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"], qty * (prod["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] - prod["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]), "drink"
                ])

    st.session_state.cart = {}  # ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
