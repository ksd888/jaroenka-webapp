import streamlit as st
import pandas as pd
import datetime
import gspread
from google.oauth2 import service_account
from reportlab.pdfgen import canvas
from io import BytesIO

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet
credentials = service_account.Credentials.from_service_account_info(
    st.secrets["GCP_SERVICE_ACCOUNT"],
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
gc = gspread.authorize(credentials)
spreadsheet = gc.open("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô‡∏õ‡∏•‡∏µ‡∏Å_GS")
sheet_main = spreadsheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
sheet_sales = spreadsheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
sheet_meta = spreadsheet.worksheet("Meta")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
data = pd.DataFrame(sheet_main.get_all_records())
expected_columns = ["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ", "‡πÄ‡∏Ç‡πâ‡∏≤", "‡∏≠‡∏≠‡∏Å", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
for col in expected_columns:
    if col not in data.columns:
        st.error(f"‚ùå ‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó: {col}")
        st.stop()

for col in ["‡πÄ‡∏Ç‡πâ‡∏≤", "‡∏≠‡∏≠‡∏Å", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]:
    data[col] = pd.to_numeric(data[col], errors="coerce").fillna(0).astype(int)
data["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] = pd.to_numeric(data["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"], errors="coerce").fillna(0)
data["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"] = pd.to_numeric(data["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"], errors="coerce").fillna(0)

# ‡∏•‡πâ‡∏≤‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
now_date = datetime.datetime.now().strftime("%Y-%m-%d")
last_date = sheet_meta.acell("B1").value
if last_date != now_date:
    data["‡πÄ‡∏Ç‡πâ‡∏≤"] = 0
    data["‡∏≠‡∏≠‡∏Å"] = 0
    sheet_main.update([data.columns.values.tolist()] + data.values.tolist())
    sheet_meta.update("B1", now_date)

# UI
st.title("üßä ‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤ | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")

st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
st.dataframe(data)

st.subheader("‚ûï ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏π‡πâ")
with st.form("add_stock_form"):
    item_add = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", data["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"])
    qty_add = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°", min_value=0, step=1)
    submitted = st.form_submit_button("‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πä‡∏≠‡∏Å")
    if submitted:
        idx = data[data["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item_add].index[0]
        data.at[idx, "‡πÄ‡∏Ç‡πâ‡∏≤"] += qty_add
        sheet_main.update([data.columns.values.tolist()] + data.values.tolist())
        st.success(f"‡πÄ‡∏ï‡∏¥‡∏° {item_add} ‡πÅ‡∏•‡πâ‡∏ß")

st.subheader("üõí ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")
selected_items = st.multiselect("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", data["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"])
sales_data = {}

for item in selected_items:
    qty = st.number_input(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢: {item}", min_value=0, step=1, key=f"sell_{item}")
    if qty > 0:
        sales_data[item] = qty

if sales_data:
    total_price = sum(data.loc[data["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == i, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"].values[0] * q for i, q in sales_data.items())
    pay_amount = st.number_input("üíµ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", min_value=0.0)
    change = pay_amount - total_price
    st.write(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total_price:,.2f} ‡∏ö‡∏≤‡∏ó")
    st.write(f"üí∏ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:,.2f} ‡∏ö‡∏≤‡∏ó")

    if st.button("üì¶ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        for item, qty in sales_data.items():
            idx = data[data["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item].index[0]
            data.at[idx, "‡∏≠‡∏≠‡∏Å"] += qty
            price = data.at[idx, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]
            cost = data.at[idx, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
            profit = (price - cost) * qty
            sheet_sales.append_row([now, item, qty, price, cost, price - cost, profit])
        sheet_main.update([data.columns.values.tolist()] + data.values.tolist())
        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

        # ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
        pdf_buffer = BytesIO()
        c = canvas.Canvas(pdf_buffer)
        c.drawString(100, 800, "üßä ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
        c.drawString(100, 780, now)
        y = 760
        for item, qty in sales_data.items():
            price = data.loc[data["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"].values[0]
            c.drawString(100, y, f"{item} x{qty} = {qty * price:.2f} ‡∏ö‡∏≤‡∏ó")
            y -= 20
        c.drawString(100, y - 10, f"‡∏£‡∏ß‡∏° {total_price:.2f} ‡∏ö‡∏≤‡∏ó  ‡∏£‡∏±‡∏ö {pay_amount:.2f} ‡∏ó‡∏≠‡∏ô {change:.2f}")
        c.save()
        st.download_button("üñ®Ô∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à", data=pdf_buffer.getvalue(), file_name="receipt.pdf")
