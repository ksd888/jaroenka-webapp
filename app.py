import streamlit as st
import datetime
from pytz import timezone
import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
import matplotlib.pyplot as plt

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô CSS
st.markdown("""
<style>
/* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏ß ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏î‡∏≥‡πÄ‡∏Ç‡πâ‡∏° */
body, .main, .block-container {
    background-color: #ffffff !important;
    color: #000000 !important;
    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
}

/* ‡∏õ‡∏∏‡πà‡∏° */
.stButton > button {
    color: white !important;
    background-color: #007aff !important;
    font-weight: bold;
    border: none;
    border-radius: 10px;
    padding: 0.5em 1.2em;
    font-size: 16px;
    transition: all 0.3s ease;
}
.stButton > button:hover {
    background-color: #0062cc !important;
    transform: scale(1.02);
}

/* Input */
input, textarea, .stTextInput > div > div > input, .stNumberInput input {
    background-color: #f2f2f7 !important;
    color: #000000 !important;
    font-weight: bold !important;
    font-size: 18px;
    border-radius: 8px !important;
    padding: 10px !important;
}

/* Custom Checkbox UI */
.stCheckbox > div {
    display: flex;
    align-items: center;
}
.stCheckbox input[type="checkbox"] {
    display: none;
}
.stCheckbox > div > label {
    position: relative;
    padding-left: 28px;
    cursor: pointer;
    font-size: 18px;
    color: #000000 !important;
    font-weight: bold;
}
.stCheckbox > div > label::before {
    content: "";
    position: absolute;
    left: 0;
    top: 2px;
    width: 20px;
    height: 20px;
    border: 2px solid #000;
    background-color: white;
    border-radius: 4px;
}
.stCheckbox input[type="checkbox"]:checked + label::before {
    background-color: #007aff;
    border-color: #007aff;
}
.stCheckbox input[type="checkbox"]:checked + label::after {
    content: "‚úì";
    position: absolute;
    left: 5px;
    top: 0px;
    font-size: 16px;
    color: white;
    font-weight: bold;
}

/* Alert ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î */
.stMarkdown span[style*="color:red"] {
    font-size: 20px !important;
    font-weight: bold !important;
    padding: 5px;
    border-radius: 5px;
}

/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */
.css-1kyxreq {
    background-color: #f9f9f9 !important;
    border-radius: 10px !important;
    padding: 15px !important;
    margin-bottom: 15px !important;
}
</style>
""", unsafe_allow_html=True)

# ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Session State
if "force_rerun" in st.session_state and st.session_state.force_rerun:
    st.session_state.force_rerun = False
    st.rerun()

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
@st.cache_resource
def connect_google_sheets():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    credentials = Credentials.from_service_account_info(st.secrets["GCP_SERVICE_ACCOUNT"], scopes=scope)
    gc = gspread.authorize(credentials)
    sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
    return sheet

sheet = connect_google_sheets()
worksheet = sheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")

# üîç ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ worksheet ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
def get_worksheet_by_name(sheet, name):
    for ws in sheet.worksheets():
        if ws.title.strip() == name.strip():
            return ws
    return None

summary_ws = get_worksheet_by_name(sheet, "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
if not summary_ws:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó‡∏ä‡∏∑‡πà‡∏≠ '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'")
    st.stop()
df = pd.DataFrame(worksheet.get_all_records())

# Helper functions
def safe_key(text): 
    return text.replace(" ", "_").replace(".", "_").replace("/", "_").lower()

def safe_int(val): 
    return int(pd.to_numeric(val, errors="coerce") or 0)

def safe_float(val): 
    return float(pd.to_numeric(val, errors="coerce") or 0.0)

def increase_quantity(p): 
    st.session_state.quantities[p] += 1

def decrease_quantity(p): 
    st.session_state.quantities[p] = max(1, st.session_state.quantities[p] - 1)

def add_money(amount: int):
    st.session_state.paid_input += amount
    st.session_state.last_paid_click = amount

# ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Session
if st.session_state.get("reset_search_items"):
    st.session_state["search_items"] = []
    st.session_state["quantities"] = {}
    st.session_state["cart"] = []
    st.session_state["paid_input"] = 0.0
    st.session_state["last_paid_click"] = 0
    del st.session_state["reset_search_items"]

default_session = {
    "cart": [],
    "search_items": [],
    "quantities": {},
    "paid_input": 0.0,
    "last_paid_click": 0,
    "sale_complete": False,
    "page": "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
}

for key, default in default_session.items():
    if key not in st.session_state:
        st.session_state[key] = default

# ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
st.markdown("### üöÄ ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
col1, col2, col3 = st.columns(3)
with col1:
    if st.button("üè™ ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
        st.session_state.page = "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
with col2:
    if st.button("üßä ‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"):
        st.session_state.page = "‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"
with col3:
    if st.button("üìä Dashboard"):
        st.session_state.page = "Dashboard"

now = datetime.datetime.now(timezone("Asia/Bangkok")).strftime("%Y-%m-%d %H:%M:%S")

# ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
if st.session_state.page == "Dashboard":
    st.title("üìä Dashboard ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    try:
        sales_ws = sheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
        sales_data = pd.DataFrame(sales_ws.get_all_records())

        if "‡πÄ‡∏ß‡∏•‡∏≤" in sales_data.columns:
            sales_data = sales_data.rename(columns={"‡πÄ‡∏ß‡∏•‡∏≤": "timestamp"})
        else:
            st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡πÄ‡∏ß‡∏•‡∏≤' ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
            sales_data["timestamp"] = pd.NaT

        sales_data["timestamp"] = pd.to_datetime(sales_data["timestamp"], errors="coerce")
        today = datetime.datetime.now(timezone("Asia/Bangkok")).date()
        today_sales = sales_data[sales_data["timestamp"].dt.date == today]

        if not today_sales.empty:
            total_today_price = today_sales["total_price"].sum()
            total_today_profit = today_sales["total_profit"].sum()
            top_items = today_sales["Items"].value_counts().idxmax()

            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", f"{total_today_price:,.2f} ‡∏ö‡∏≤‡∏ó")
            with col2:
                st.metric("üü¢ ‡∏Å‡∏≥‡πÑ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", f"{total_today_profit:,.2f} ‡∏ö‡∏≤‡∏ó")
            with col3:
                st.metric("üî• ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ", top_items)
        else:
            st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")

        # ‡∏Å‡∏£‡∏≤‡∏ü 14 ‡∏ß‡∏±‡∏ô
        sales_data["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = sales_data["timestamp"].dt.date
        recent_df = sales_data.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", ascending=False).head(14)
        daily_summary = recent_df.groupby("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà").agg({"total_profit": "sum", "total_price": "sum"}).sort_index()

        st.subheader("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        fig1, ax1 = plt.subplots(figsize=(10, 5))
        ax1.plot(daily_summary.index, daily_summary["total_profit"], marker='o', color='#007aff', linewidth=2)
        ax1.set_ylabel("‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡∏ö‡∏≤‡∏ó)")
        ax1.set_xlabel("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
        ax1.grid(True, linestyle='--', alpha=0.7)
        st.pyplot(fig1)

        st.subheader("üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏° 14 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{daily_summary['total_price'].sum():,.0f} ‡∏ö‡∏≤‡∏ó")
        with col2:
            st.metric("‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏ß‡∏°", f"{daily_summary['total_profit'].sum():,.0f} ‡∏ö‡∏≤‡∏ó")

        st.subheader("üî• ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏™‡∏∏‡∏î")
        top_day = daily_summary["total_price"].idxmax()
        top_sales = daily_summary["total_price"].max()
        st.success(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {top_day} ‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {top_sales:,.0f} ‡∏ö‡∏≤‡∏ó")

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Dashboard: {str(e)}")

# ‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
elif st.session_state.page == "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
    st.title("üßÉ ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
    product_names = df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist()
    
    # ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    search_term = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", help="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
    filtered_products = [p for p in product_names if search_term.lower() in p.lower()] if search_term else product_names
    selected = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠", filtered_products, key="search_items")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    for p in selected:
        if p not in st.session_state.quantities:
            st.session_state.quantities[p] = 1
        
        qty = st.session_state.quantities[p]
        row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == p]
        stock = int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"].values[0]) if not row.empty else 0
        
        st.markdown(f"**{p}**")
        col1, col2, col3, col4 = st.columns([1, 1, 1, 2])
        with col1: 
            st.button("‚ûñ", key=f"dec_{safe_key(p)}", on_click=decrease_quantity, args=(p,))
        with col2: 
            st.markdown(f"<div style='text-align:center; font-size:24px'>{qty}</div>", unsafe_allow_html=True)
        with col3: 
            st.button("‚ûï", key=f"inc_{safe_key(p)}", on_click=increase_quantity, args=(p,))
        with col4:
            stock_color = "red" if stock < 3 else "green"
            st.markdown(f"<span style='color:{stock_color}; font-size:18px; font-weight:bold'>üì¶ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {stock} ‡∏ä‡∏¥‡πâ‡∏ô</span>", unsafe_allow_html=True)

    if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", type="primary"):
        for p in selected:
            qty = safe_int(st.session_state.quantities[p])
            if qty > 0:
                st.session_state.cart.append((p, qty))
        st.success("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
    total_price, total_profit = 0, 0
    
    if not st.session_state.cart:
        st.info("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤")
    else:
        for item, qty in st.session_state.cart:
            row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item].iloc[0]
            price, cost = safe_float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]), safe_float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"])
            subtotal, profit = qty * price, qty * (price - cost)
            total_price += subtotal
            total_profit += profit
            st.write(f"- {item} x {qty} = {subtotal:.2f} ‡∏ö‡∏≤‡∏ó")

    # ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
    st.subheader("üí∞ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
    st.session_state.paid_input = st.number_input("‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", 
                                               value=st.session_state.paid_input, 
                                               step=1.0,
                                               min_value=0.0)
    
    # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πà‡∏ß‡∏ô
    st.write("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πà‡∏ß‡∏ô:")
    col1, col2, col3 = st.columns(3)
    with col1: st.button("20", on_click=lambda: add_money(20))
    with col2: st.button("50", on_click=lambda: add_money(50))
    with col3: st.button("100", on_click=lambda: add_money(100))
    col4, col5 = st.columns(2)
    with col4: st.button("500", on_click=lambda: add_money(500))
    with col5: st.button("1000", on_click=lambda: add_money(1000))
    
    if st.session_state.last_paid_click:
        if st.button(f"‚ûñ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å {st.session_state.last_paid_click}"):
            st.session_state.paid_input -= st.session_state.last_paid_click
            st.session_state.last_paid_click = 0

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î
    st.info(f"üì¶ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total_price:,.2f} ‡∏ö‡∏≤‡∏ó | üü¢ ‡∏Å‡∏≥‡πÑ‡∏£: {total_profit:,.2f} ‡∏ö‡∏≤‡∏ó")
    if st.session_state.paid_input >= total_price:
        st.success(f"üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {st.session_state.paid_input - total_price:,.2f} ‡∏ö‡∏≤‡∏ó")
    else:
        st.warning(f"üí∏ ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ (‡∏Ç‡∏≤‡∏î: {total_price - st.session_state.paid_input:,.2f} ‡∏ö‡∏≤‡∏ó)")

    # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
    if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢", type="primary", disabled=not st.session_state.cart):
        for item, qty in st.session_state.cart:
            index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item].index[0]
            row = df.loc[index]
            idx_in_sheet = index + 2
            new_out = safe_int(row["‡∏≠‡∏≠‡∏Å"]) + qty
            new_left = safe_int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]) - qty
            worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏≠‡∏≠‡∏Å") + 1, new_out)
            worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ") + 1, new_left)

        summary_ws.append_row([
            now,
            ", ".join([f"{i} x {q}" for i, q in st.session_state.cart]),
            total_price,
            total_profit,
            st.session_state.paid_input,
            st.session_state.paid_input - total_price,
            "drink"
        ])
        st.session_state.reset_search_items = True
        st.rerun()

    # ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    with st.expander("üì¶ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", expanded=False):
        tab1, tab2, tab3 = st.tabs(["‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î"])
        
        with tab1:
            restock_item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", product_names, key="restock_select")
            restock_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°", min_value=1, step=1, key="restock_qty")
            if st.button("üì• ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
                index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == restock_item].index[0]
                idx_in_sheet = index + 2
                row = df.loc[index]
                new_in = safe_int(row["‡πÄ‡∏Ç‡πâ‡∏≤"]) + restock_qty
                new_left = safe_int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]) + restock_qty
                worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡πÄ‡∏Ç‡πâ‡∏≤") + 1, new_in)
                worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ") + 1, new_left)
                st.success(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° {restock_item} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {restock_qty} ‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                st.rerun()
        
        with tab2:
            edit_item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", product_names, key="edit_select")
            index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == edit_item].index[0]
            idx_in_sheet = index + 2
            row = df.loc[index]
            
            col1, col2 = st.columns(2)
            with col1:
                new_price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢", value=safe_float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]), key="edit_price")
            with col2:
                new_cost = st.number_input("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô", value=safe_float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]), key="edit_cost")
            
            new_stock = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ", value=safe_int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]), key="edit_stock", step=1)
            
            if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"):
                worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢") + 1, new_price)
                worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô") + 1, new_cost)
                worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ") + 1, new_stock)
                st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {edit_item} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                st.rerun()
        
        with tab3:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏¢‡∏≠‡∏î '‡πÄ‡∏Ç‡πâ‡∏≤' ‡πÅ‡∏•‡∏∞ '‡∏≠‡∏≠‡∏Å' ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
            if st.button("üîÅ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)", type="secondary"):
                num_rows = len(df)
                worksheet.batch_update([
                    {"range": f"E2:E{num_rows+1}", "values": [[0]] * num_rows},
                    {"range": f"G2:G{num_rows+1}", "values": [[0]] * num_rows}
                ])
                st.success("‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î '‡πÄ‡∏Ç‡πâ‡∏≤' ‡πÅ‡∏•‡∏∞ '‡∏≠‡∏≠‡∏Å' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà")
                st.rerun()

# ‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á
elif st.session_state.page == "‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á":
    def reset_ice_session_state():
        ice_types = ["‡πÇ‡∏°‡πà", "‡∏´‡∏•‡∏≠‡∏î‡πÉ‡∏´‡∏ç‡πà", "‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡πá‡∏Å", "‡∏Å‡πâ‡∏≠‡∏ô"]
        for ice_type in ice_types:
            for prefix in ["in_", "sell_out_"]:
                for suffix in ["_value"]:  # Removed _input from reset
                    key = f"{prefix}{ice_type}{suffix}"
                    st.session_state[key] = 0
        st.session_state["force_rerun"] = True

    st.title("üßä ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
    
    iceflow_sheet = sheet.worksheet("iceflow")
    df_ice = pd.DataFrame(iceflow_sheet.get_all_records())
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] = df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"].astype(str).str.strip().str.lower()
    df_ice["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] = pd.to_numeric(df_ice["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"], errors='coerce')
    df_ice["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] = pd.to_numeric(df_ice["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"], errors='coerce')
    df_ice = df_ice.dropna(subset=["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
    
    today_str = datetime.datetime.now().strftime("%-d/%-m/%Y")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
    if not df_ice.empty and df_ice["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].iloc[0] != today_str:
        df_ice["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = today_str
        df_ice["‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"] = 0
        df_ice["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"] = 0
        df_ice["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"] = 0
        df_ice["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô"] = 0
        df_ice["‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°"] = 0
        df_ice["‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥"] = 0
        iceflow_sheet.update([df_ice.columns.tolist()] + df_ice.values.tolist())
        st.info("üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")
        reset_ice_session_state()
    
    ice_types = ["‡πÇ‡∏°‡πà", "‡∏´‡∏•‡∏≠‡∏î‡πÉ‡∏´‡∏ç‡πà", "‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡πá‡∏Å", "‡∏Å‡πâ‡∏≠‡∏ô"]
    
    # ‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á
    st.markdown("### üì¶ ‡πÇ‡∏ã‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á")
    in_values = {}
    cols = st.columns(4)

    for i, ice_type in enumerate(ice_types):
        row = df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"].str.contains(ice_type)]
        if not row.empty:
            idx = row.index[0]
            old_val = safe_int(df_ice.at[idx, "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"])
            
            # Initialize session state if not exists
            if f"in_{ice_type}_value" not in st.session_state:
                st.session_state[f"in_{ice_type}_value"] = old_val
            
            with cols[i]:
                # Use a temporary variable for the input
                current_value = st.number_input(
                    f"üì• {ice_type}", 
                    min_value=0, 
                    value=st.session_state[f"in_{ice_type}_value"], 
                    key=f"in_{ice_type}_input"
                )
                # Update the session state value separately
                st.session_state[f"in_{ice_type}_value"] = current_value
                df_ice.at[idx, "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"] = current_value
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                received = safe_int(df_ice.at[idx, "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"])
                sold = safe_int(df_ice.at[idx, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"])
                melted = safe_int(df_ice.at[idx, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"])
                remaining = received - sold - melted
                
                st.metric("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", f"{remaining} ‡∏ñ‡∏∏‡∏á")
        else:
            st.warning(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡∏ä‡∏ô‡∏¥‡∏î '{ice_type}'")

     # ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á
    if st.button("üì• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á", type="primary"):
        try:
            iceflow_sheet.update([df_ice.columns.tolist()] + df_ice.values.tolist())
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏•‡πâ‡∏ß")
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            reset_ice_session_state()
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï DataFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            df_ice = pd.DataFrame(iceflow_sheet.get_all_records())
            
            st.session_state["force_rerun"] = True
            st.rerun()
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")


    # ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á
    st.markdown("### üí∏ ‡πÇ‡∏ã‡∏ô‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á")
    total_income = 0
    total_profit = 0

    cols = st.columns(4)
    for i, ice_type in enumerate(ice_types):
        row = df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"].str.contains(ice_type)]
        if not row.empty:
            idx = row.index[0]
            price = safe_float(df_ice.at[idx, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
            cost = safe_float(df_ice.at[idx, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
            old_out = safe_int(df_ice.at[idx, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"])
            
            # Initialize session state if not exists
            if f"sell_out_{ice_type}_value" not in st.session_state:
                st.session_state[f"sell_out_{ice_type}_value"] = old_out
            
            with cols[i]:
                # Use a temporary variable for the input
                current_value = st.number_input(
                    f"üßä ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å {ice_type}", 
                    min_value=0, 
                    value=st.session_state[f"sell_out_{ice_type}_value"], 
                    key=f"sell_out_{ice_type}_input"
                )
                # Update the session state value separately
                st.session_state[f"sell_out_{ice_type}_value"] = current_value
                
                melted = safe_int(df_ice.at[idx, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"])
                income = current_value * price
                profit = (current_value * (price - cost)) - (melted * cost)
                
                df_ice.at[idx, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"] = current_value
                df_ice.at[idx, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô"] = safe_int(df_ice.at[idx, "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"]) - current_value - melted
                df_ice.at[idx, "‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°"] = income
                df_ice.at[idx, "‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥"] = profit
                df_ice.at[idx, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = today_str
                
                total_income += income
                total_profit += profit

    # ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
    if st.button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á", type="primary"):
        try:
            iceflow_sheet.update([df_ice.columns.tolist()] + df_ice.values.tolist())
            
            for _, row in df_ice.iterrows():
                summary_ws.append_row([
                    today_str,
                    row["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"],
                    safe_int(row["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"]),
                    row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"],
                    row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"],
                    row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] - row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"],
                    safe_int(row["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"]) * row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"],
                    safe_int(row["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"]) * (row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] - row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"]),
                    "ice"
                ])
            
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡πâ‡∏ß")
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            reset_ice_session_state()
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï DataFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            df_ice = pd.DataFrame(iceflow_sheet.get_all_records())
            
            st.session_state["force_rerun"] = True
            st.rerun()
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
        
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
    st.markdown("### üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{total_income:,.2f} ‡∏ö‡∏≤‡∏ó")
    with col2:
        st.metric("üü¢ ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥", f"{total_profit:,.2f} ‡∏ö‡∏≤‡∏ó")
