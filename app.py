import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

# ‚õìÔ∏è ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
SCOPE = ["https://www.googleapis.com/auth/spreadsheets"]
creds = Credentials.from_service_account_info(
    st.secrets["GCP_SERVICE_ACCOUNT"],
    scopes=SCOPE,
)
gc = gspread.authorize(creds)
sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
ws = sheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")

# üîÅ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df = pd.DataFrame(ws.get_all_records())
df["‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] = pd.to_numeric(df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"], errors="coerce") - pd.to_numeric(df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"], errors="coerce")

# üì¶ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
if "cart" not in st.session_state:
    st.session_state.cart = {}

# üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
search = st.text_input("üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
if search:
    filtered = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].str.contains(search, case=False, na=False)]
else:
    filtered = df.copy()

# üõí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
for _, row in filtered.iterrows():
    name = row["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]
    col1, col2, col3 = st.columns([3, 1, 1])
    with col1:
        st.markdown(f"**{name}**")
    with col2:
        if st.button("+", key=f"add_{name}"):
            st.session_state.cart[name] = st.session_state.cart.get(name, 0) + 1
    with col3:
        if st.button("-", key=f"sub_{name}"):
            if name in st.session_state.cart:
                st.session_state.cart[name] = max(0, st.session_state.cart[name] - 1)
                if st.session_state.cart[name] == 0:
                    del st.session_state.cart[name]

st.divider()
st.markdown("## üßæ ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

total = 0
profit = 0
for name, qty in st.session_state.cart.items():
    item = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == name].iloc[0]
    price = item["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]
    cost = item["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
    st.write(f"{name} x {qty} = {qty * price} ‡∏ö‡∏≤‡∏ó")
    total += qty * price
    profit += qty * (price - cost)

st.write(f"üí∞ **‡∏£‡∏ß‡∏°‡πÄ‡∏á‡∏¥‡∏ô:** {total} ‡∏ö‡∏≤‡∏ó")
money_received = st.number_input("üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤", min_value=0)
if money_received:
    st.write(f"üí∏ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {money_received - total} ‡∏ö‡∏≤‡∏ó")

# ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≤‡∏¢
if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    for name, qty in st.session_state.cart.items():
        ws.append_row([now, name, qty, total, profit, "drink"])
    st.success("‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‚úÖ")

    # ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ + ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    st.session_state.cart = {}
    st.session_state["üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤"] = 0
    st.experimental_rerun()

# üîÑ ‡∏õ‡∏∏‡πà‡∏° Undo ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
if "last_action" in st.session_state:
    if st.button("‚Ü©Ô∏è Undo ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"):
        st.session_state.cart = st.session_state.last_action.copy()
        st.success("‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏∑‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß")
else:
    st.session_state.last_action = {}

# üõ† ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
st.divider()
st.markdown("### ‚ûï ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤")
for i, row in df.iterrows():
    name = row["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]
    qty = st.number_input(f"‡πÄ‡∏ï‡∏¥‡∏° {name}", min_value=0, key=f"‡πÄ‡∏ï‡∏¥‡∏°_{name}")
    if qty > 0:
        df.at[i, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"] += qty
        ws.update_cell(i + 2, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ") + 1, df.at[i, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"])
        st.success(f"‡πÄ‡∏ï‡∏¥‡∏° {name} ‡πÅ‡∏•‡πâ‡∏ß ‚úÖ")
        st.experimental_rerun()
