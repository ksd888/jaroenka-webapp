import streamlit as st
import datetime
from pytz import timezone
import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
import matplotlib.pyplot as plt

# ‚úÖ Apple Style CSS + ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
st.markdown("""
    
    
    <style>
    *, body, .main, .block-container, .stText, .stMarkdown, .stAlert, label, span {
        color: #ffffff !important;
    }
    .stButton>button {
        color: #ffffff !important;
        background-color: #007aff !important;
        font-weight: bold;
        border-radius: 10px;
        padding: 0.5em 1.2em;
    }
    .stTextInput>div>div>input,
    .stNumberInput input,
    .stSelectbox div,
    .stMultiSelect div {
        background-color: #f2f2f7 !important;
        color: #000000 !important;
        border-radius: 6px;
        font-size: 18px;
        font-weight: bold;
    }
    </style>


""", unsafe_allow_html=True)

# ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏ó‡∏ô Sidebar
st.markdown("### üöÄ ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
col1, col2, col3 = st.columns(3)
if "page" not in st.session_state:
    st.session_state.page = "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
with col1:
    if st.button("üè™ ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
        st.session_state.page = "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
with col2:
    if st.button("üßä ‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"):
        st.session_state.page = "‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"
with col3:
    if st.button("üìä Dashboard"):
        st.session_state.page = "Dashboard"

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤
now = datetime.datetime.now(timezone("Asia/Bangkok")).strftime("%Y-%m-%d %H:%M:%S")

# ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GCP_SERVICE_ACCOUNT"], scopes=scope)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
worksheet = sheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
summary_ws = sheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
df = pd.DataFrame(worksheet.get_all_records())

# ‚úÖ Helper functions
def safe_key(text): return text.replace(" ", "_").replace(".", "_").replace("/", "_").lower()
def safe_int(val): return int(pd.to_numeric(val, errors="coerce") or 0)
def safe_float(val): return float(pd.to_numeric(val, errors="coerce") or 0.0)
def safe_safe_int(val): 
    try: return safe_int(safe_float(val))
    except: return 0
def safe_safe_float(val): 
    try: return safe_float(val)
    except: return 0.0
def increase_quantity(p): st.session_state.quantities[p] += 1
def decrease_quantity(p): st.session_state.quantities[p] = max(1, st.session_state.quantities[p] - 1)

# ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Session
if st.session_state.get("reset_search_items"):
    st.session_state["search_items"] = []
    st.session_state["quantities"] = {}
    st.session_state["cart"] = []
    st.session_state["paid_input"] = 0.0
    st.session_state["last_paid_click"] = 0
    del st.session_state["reset_search_items"]

# ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
default_session = {
    "cart": [],
    "search_items": [],
    "quantities": {},
    "paid_input": 0.0,
    "last_paid_click": 0,
    "sale_complete": False
}
for key, default in default_session.items():
    if key not in st.session_state:
        st.session_state[key] = default

# ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
if st.session_state.page == "Dashboard":
    st.title("üìä Dashboard ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    try:
        sales_ws = sheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
        sales_data = pd.DataFrame(sales_ws.get_all_records())

        if "‡πÄ‡∏ß‡∏•‡∏≤" in sales_data.columns:
            sales_data = sales_data.rename(columns={"‡πÄ‡∏ß‡∏•‡∏≤": "timestamp"})
        else:
            st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡πÄ‡∏ß‡∏•‡∏≤' ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
            sales_data["timestamp"] = pd.NaT

        sales_data["timestamp"] = pd.to_datetime(sales_data["timestamp"], errors="coerce")
        today = datetime.datetime.now(timezone("Asia/Bangkok")).date()
        today_sales = sales_data[sales_data["timestamp"].dt.date == today]

        if not today_sales.empty:
            total_today_price = today_sales["total_price"].sum()
            total_today_profit = today_sales["total_profit"].sum()
            top_items = today_sales["Items"].value_counts().idxmax()

            st.success(f"‚úÖ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {total_today_price:.2f} ‡∏ö‡∏≤‡∏ó")
            st.info(f"üü¢ ‡∏Å‡∏≥‡πÑ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {total_today_profit:.2f} ‡∏ö‡∏≤‡∏ó")
            st.warning(f"üî• ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ: {top_items}")
        else:
            st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")

        # ‡∏Å‡∏£‡∏≤‡∏ü 14 ‡∏ß‡∏±‡∏ô
        sales_data["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = sales_data["timestamp"].dt.date
        recent_df = sales_data.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", ascending=False).head(14)
        daily_summary = recent_df.groupby("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà").agg({"total_profit": "sum", "total_price": "sum"}).sort_index()

        st.subheader("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        fig1, ax1 = plt.subplots()
        ax1.plot(daily_summary.index, daily_summary["total_profit"], marker='o')
        ax1.set_ylabel("‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡∏ö‡∏≤‡∏ó)")
        ax1.set_xlabel("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
        ax1.grid(True)
        st.pyplot(fig1)

        st.subheader("üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏° 14 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        st.metric("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{daily_summary['total_price'].sum():,.0f} ‡∏ö‡∏≤‡∏ó")
        st.metric("‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏ß‡∏°", f"{daily_summary['total_profit'].sum():,.0f} ‡∏ö‡∏≤‡∏ó")

        st.subheader("üî• ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏™‡∏∏‡∏î")
        top_day = daily_summary["total_price"].idxmax()
        top_sales = daily_summary["total_price"].max()
        st.success(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {top_day} ‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {top_sales:,.0f} ‡∏ö‡∏≤‡∏ó")

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Dashboard: {e}")

# ‚úÖ (‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ / ‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á ‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏°‡∏≤‡∏ï‡πà‡∏≠‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)

# ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
elif st.session_state.page == "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
    st.title("üßÉ ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
    product_names = df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist()
    st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠", product_names, key="search_items")
    selected = st.session_state["search_items"]

    for p in selected:
        if p not in st.session_state.quantities:
            st.session_state.quantities[p] = 1
        qty = st.session_state.quantities[p]
        st.markdown(f"**{p}**")
        col1, col2, col3 = st.columns([1, 1, 1])
        with col1: st.button("‚ûñ", key=f"dec_{safe_key(p)}", on_click=decrease_quantity, args=(p,))
        with col2: st.markdown(f"<div style='text-align:center; font-size:24px'>{qty}</div>", unsafe_allow_html=True)
        with col3: st.button("‚ûï", key=f"inc_{safe_key(p)}", on_click=increase_quantity, args=(p,))
        row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == p]
        stock = int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"].values[0]) if not row.empty else 0
        st.markdown(f"<span style='color:{'red' if stock < 3 else 'black'}; font-size:18px'>üßä ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ: {stock}</span>", unsafe_allow_html=True)

    if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"):
        for p in selected:
            qty = safe_safe_int(st.session_state.quantities[p])
            if qty > 0:
                st.session_state.cart.append((p, qty))
        st.success("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")

    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
    total_price, total_profit = 0, 0
    for item, qty in st.session_state.cart:
        row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item].iloc[0]
        price, cost = safe_safe_float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]), safe_safe_float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"])
        subtotal, profit = qty * price, qty * (price - cost)
        total_price += subtotal
        total_profit += profit
        st.write(f"- {item} x {qty} = {subtotal:.2f} ‡∏ö‡∏≤‡∏ó")

    st.session_state.paid_input = st.number_input("üí∞ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", value=st.session_state.paid_input, step=1.0)
    def add_money(amount: int):
        st.session_state.paid_input += amount
        st.session_state.last_paid_click = amount
    col1, col2, col3 = st.columns(3)
    with col1: st.button("20", on_click=add_money, args=(20,))
    with col2: st.button("50", on_click=add_money, args=(50,))
    with col3: st.button("100", on_click=add_money, args=(100,))
    col4, col5 = st.columns(2)
    with col4: st.button("500", on_click=add_money, args=(500,))
    with col5: st.button("1000", on_click=add_money, args=(1000,))
    if st.session_state.last_paid_click:
        if st.button(f"‚ûñ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å {st.session_state.last_paid_click}"):
            st.session_state.paid_input -= st.session_state.last_paid_click
            st.session_state.last_paid_click = 0

    st.info(f"üì¶ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total_price:.2f} ‡∏ö‡∏≤‡∏ó | üü¢ ‡∏Å‡∏≥‡πÑ‡∏£: {total_profit:.2f} ‡∏ö‡∏≤‡∏ó")
    if st.session_state.paid_input >= total_price:
        st.success(f"üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {st.session_state.paid_input - total_price:.2f} ‡∏ö‡∏≤‡∏ó")
    else:
        st.warning("üí∏ ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠")

    if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
        for item, qty in st.session_state.cart:
            index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item].index[0]
            row = df.loc[index]
            idx_in_sheet = index + 2
            new_out = safe_safe_int(row["‡∏≠‡∏≠‡∏Å"]) + qty
            new_left = safe_safe_int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]) - qty
            worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏≠‡∏≠‡∏Å") + 1, new_out)
            worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ") + 1, new_left)

        summary_ws.append_row([
            now,
            ", ".join([f"{i} x {q}" for i, q in st.session_state.cart]),
            total_price,
            total_profit,
            st.session_state.paid_input,
            st.session_state.paid_input - total_price,
            "drink"
        ])
        st.session_state.reset_search_items = True
        st.rerun()

    # üì¶ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    with st.expander("üì¶ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
        restock_item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", product_names, key="restock_select")
        restock_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°", min_value=1, step=1, key="restock_qty")
        if st.button("üì• ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
            index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == restock_item].index[0]
            idx_in_sheet = index + 2
            row = df.loc[index]
            new_in = safe_safe_int(row["‡πÄ‡∏Ç‡πâ‡∏≤"]) + restock_qty
            new_left = safe_safe_int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]) + restock_qty
            worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡πÄ‡∏Ç‡πâ‡∏≤") + 1, new_in)
            worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ") + 1, new_left)
            st.success(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° {restock_item} ‡πÅ‡∏•‡πâ‡∏ß")

    # ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    with st.expander("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
        edit_item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", product_names, key="edit_select")
        index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == edit_item].index[0]
        idx_in_sheet = index + 2
        row = df.loc[index]
        new_price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢", value=safe_safe_float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]), key="edit_price")
        new_cost = st.number_input("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô", value=safe_safe_float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]), key="edit_cost")
        new_stock = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ", value=safe_safe_int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]), key="edit_stock", step=1)
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"):
            worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢") + 1, new_price)
            worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô") + 1, new_cost)
            worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ") + 1, new_stock)
            st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {edit_item} ‡πÅ‡∏•‡πâ‡∏ß")

    # üîÅ ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å
    if st.button("üîÅ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)", key="reset_io"):
        num_rows = len(df)
        worksheet.batch_update([
            {"range": f"E2:E{num_rows+1}", "values": [[0]] * num_rows},
            {"range": f"G2:G{num_rows+1}", "values": [[0]] * num_rows}
        ])
        st.success("‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î '‡πÄ‡∏Ç‡πâ‡∏≤' ‡πÅ‡∏•‡∏∞ '‡∏≠‡∏≠‡∏Å' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà")

elif st.session_state.page == "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
    st.title("üßÉ ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
    st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠", df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist(), key="search_items")
    selected = st.session_state["search_items"]
    for p in selected:
        if p not in st.session_state.quantities:
            st.session_state.quantities[p] = 1
        qty = st.session_state.quantities[p]
        st.markdown(f"**{p}**")
        col1, col2, col3 = st.columns([1, 1, 1])
        with col1: st.button("‚ûñ", key=f"dec_{safe_key(p)}", on_click=decrease_quantity, args=(p,))
        with col2: st.markdown(f"<div style='text-align:center; font-size:24px'>{qty}</div>", unsafe_allow_html=True)
        with col3: st.button("‚ûï", key=f"inc_{safe_key(p)}", on_click=increase_quantity, args=(p,))
        row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == p]
        stock = int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"].values[0]) if not row.empty else 0
        st.markdown(f"<span style='color:{'red' if stock < 3 else 'black'}; font-size:18px'>üßä ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ: {stock}</span>", unsafe_allow_html=True)

# ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ "‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"
elif st.session_state.page == "‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á":
    st.title("üßä ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")

    iceflow_sheet = sheet.worksheet("iceflow")
    df_ice = pd.DataFrame(iceflow_sheet.get_all_records())
    df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] = df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"].astype(str).str.strip().str.lower()
    df_ice["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] = pd.to_numeric(df_ice["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"], errors='coerce')
    df_ice["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] = pd.to_numeric(df_ice["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"], errors='coerce')
    df_ice = df_ice.dropna(subset=["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])

    today_str = datetime.datetime.now().strftime("%-d/%-m/%Y")
    if df_ice["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].iloc[0] != today_str:
        df_ice["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = today_str
        df_ice["‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"] = 0
        df_ice["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"] = 0
        df_ice["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"] = 0
        df_ice["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô"] = 0
        df_ice["‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°"] = 0
        df_ice["‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥"] = 0
        iceflow_sheet.update([df_ice.columns.tolist()] + df_ice.values.tolist())
        st.info("üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")

    ice_types = ["‡πÇ‡∏°‡πà", "‡∏´‡∏•‡∏≠‡∏î‡πÉ‡∏´‡∏ç‡πà", "‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡πá‡∏Å", "‡∏Å‡πâ‡∏≠‡∏ô"]
    st.markdown("### üì¶ ‡πÇ‡∏ã‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á")
    in_values = {}
    col1, col2, col3, col4 = st.columns(4)
    for i, k in enumerate(ice_types):
        row = df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"].str.contains(k)]
        if not row.empty:
            idx = row.index[0]
            old_val = int(df_ice.at[idx, "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"])
            with [col1, col2, col3, col4][i]:
                in_values[k] = st.number_input(f"üì• {k}", min_value=0, value=old_val, key=f"in_{k}")
                df_ice.at[idx, "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"] = in_values[k]
        else:
            st.warning(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡∏ä‡∏ô‡∏¥‡∏î '{k}' ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó iceflow")

    st.markdown("### üí∏ ‡πÇ‡∏ã‡∏ô‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á")
    total_income = 0
    total_profit = 0
    for k in ice_types:
        row = df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"].str.contains(k)]
        if not row.empty:
            idx = row.index[0]
            price = float(df_ice.at[idx, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
            cost = float(df_ice.at[idx, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
            profit_unit = price - cost
            old_out = int(df_ice.at[idx, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"])
            out_val = st.number_input(f"üßä ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å {k}", min_value=0, value=old_out, key=f"out_{k}")
            income = out_val * price
            profit = out_val * profit_unit

            df_ice.at[idx, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"] = out_val
            df_ice.at[idx, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô"] = int(df_ice.at[idx, "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"]) - out_val
            df_ice.at[idx, "‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°"] = profit
            df_ice.at[idx, "‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥"] = profit
            df_ice.at[idx, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = today_str

            total_income += income
            total_profit += profit
        else:
            st.warning(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á '{k}' ‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó")

    if st.button("üì• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"):
        for k in ice_types:
            row = df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"].str.contains(k)]
            if not row.empty:
                idx = row.index[0]
                df_ice.at[idx, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = today_str
        iceflow_sheet.update([df_ice.columns.tolist()] + df_ice.values.tolist())
        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        st.experimental_rerun()

    if st.button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"):
        iceflow_sheet.update([df_ice.columns.tolist()] + df_ice.values.tolist())
        for _, row in df_ice.iterrows():
            summary_ws.append_row([
                today_str,
                row["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"],
                int(row["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"]),
                row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"],
                row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"],
                row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] - row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"],
                int(row["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"]) * row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"],
                int(row["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"]) * (row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] - row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"]),
                "ice"
            ])
        st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß | ‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏° {total_income:.0f} ‡∏ö‡∏≤‡∏ó | ‡∏Å‡∏≥‡πÑ‡∏£ {total_profit:.0f} ‡∏ö‡∏≤‡∏ó")
        st.experimental_rerun()
