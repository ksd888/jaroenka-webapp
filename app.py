import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import json

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤", layout="wide")

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name("service_account.json", scope)
gc = gspread.authorize(credentials)
spreadsheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
worksheet = spreadsheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
data = worksheet.get_all_records()
df = pd.DataFrame(data)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö int
def safe_int(val):
    try:
        return int(val)
    except:
        return 0

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á UI ---

st.title("üßä ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
product_names = df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist()

# ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
if "cart" not in st.session_state:
    st.session_state.cart = {}

# --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ---
st.header("üõí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
selected_products = st.multiselect("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠", options=product_names)

for name in selected_products:
    col1, col2 = st.columns([1, 1])
    with col1:
        if st.button(f"‚ûñ", key=f"remove_{name}"):
            st.session_state.cart[name] = max(0, st.session_state.cart.get(name, 0) - 1)
    with col2:
        if st.button(f"‚ûï", key=f"add_{name}"):
            st.session_state.cart[name] = st.session_state.cart.get(name, 0) + 1

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"):
    for name in selected_products:
        st.session_state.cart[name] = st.session_state.cart.get(name, 0) + 1

# --- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ ---
st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
total = 0
profit = 0
for name, qty in st.session_state.cart.items():
    if qty > 0:
        row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == name].iloc[0]
        price = float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"])
        cost = float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"])
        st.markdown(f"- {name} x {qty} = {qty * price:.2f} ‡∏ö‡∏≤‡∏ó")
        total += qty * price
        profit += qty * (price - cost)

st.info(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:.2f} ‡∏ö‡∏≤‡∏ó | üü¢ ‡∏Å‡∏≥‡πÑ‡∏£: {profit:.2f} ‡∏ö‡∏≤‡∏ó")

# ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
received = st.number_input("üí∞ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", min_value=0.0, step=1.0)
change = received - total
if change < 0:
    st.warning("üí∏ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠")
else:
    st.success(f"üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")

# --- ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ ---
if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    for name, qty in st.session_state.cart.items():
        if qty > 0:
            row_index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == name].index[0]
            current_stock = safe_int(df.loc[row_index, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"])
            df.at[row_index, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = current_stock - qty
            worksheet.update_cell(row_index + 2, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠") + 1, current_stock - qty)

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
    summary_ws = spreadsheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
    summary_ws.append_row([now, json.dumps(st.session_state.cart, ensure_ascii=False), total, profit, "drink"])

    st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
    st.session_state.cart = {}

# --- ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ---

with st.expander("üì¶ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
    product_to_fill = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°", product_names, key="fill_product")
    qty_to_add = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ç‡πâ‡∏≤", min_value=1, step=1, key="fill_qty")
    if st.button("üì• ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
        row_index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == product_to_fill].index[0]
        current_stock = safe_int(df.loc[row_index, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"])
        new_stock = current_stock + qty_to_add
        worksheet.update_cell(row_index + 2, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠") + 1, new_stock)
        st.success(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {product_to_fill} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {qty_to_add} ‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏ß‡∏° = {new_stock})")

with st.expander("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
    product_to_edit = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", product_names, key="edit_product")
    new_price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà", min_value=0.0, step=0.5, key="new_price")
    new_cost = st.number_input("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÉ‡∏´‡∏°‡πà", min_value=0.0, step=0.5, key="new_cost")
    if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏Ñ‡∏≤"):
        row_index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == product_to_edit].index[0]
        worksheet.update_cell(row_index + 2, df.columns.get_loc("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢") + 1, new_price)
        worksheet.update_cell(row_index + 2, df.columns.get_loc("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô") + 1, new_cost)
        st.success(f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏Ñ‡∏≤ {product_to_edit} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡∏Ç‡∏≤‡∏¢: {new_price}, ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô: {new_cost})")
