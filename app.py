import streamlit as st
import datetime
import gspread
import pandas as pd
from google.oauth2.service_account import Credentials

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
def safe_int(val): return int(pd.to_numeric(val, errors="coerce") or 0)
def safe_float(val): return float(pd.to_numeric(val, errors="coerce") or 0.0)

# üåô Toggle Dark/Light Mode
if "dark_mode" not in st.session_state:
    st.session_state.dark_mode = True

mode = st.toggle("üåó ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏°‡∏∑‡∏î", value=st.session_state.dark_mode)
st.session_state.dark_mode = mode

# üé® CSS Theme Based on Mode
if st.session_state.dark_mode:
    bg_color = "#0e1117"
    text_color = "#ffffff"
else:
    bg_color = "#ffffff"
    text_color = "#000000"

st.markdown(f'''
    <style>
    html, body, [class*="css"] {{
        font-family: "Kanit", sans-serif;
        background-color: {bg_color};
        color: {text_color};
    }}
    .stButton > button {{
        font-weight: bold;
    }}
    </style>
''', unsafe_allow_html=True)

# üîê ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GCP_SERVICE_ACCOUNT"], scopes=scope)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
worksheet = sheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
summary_ws = sheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")

# üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
data = worksheet.get_all_records()
df = pd.DataFrame(data)

# üß† ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ session_state
for key in ["cart", "search_items", "quantities", "paid_input", "sale_complete", "sale_trigger"]:
    if key not in st.session_state:
        if key in ["cart", "search_items"]:
            st.session_state[key] = []
        elif key == "quantities":
            st.session_state[key] = {}
        elif key in ["paid_input"]:
            st.session_state[key] = 0.0
        else:
            st.session_state[key] = False

# üîÅ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à
if st.session_state.sale_complete:
    st.session_state["cart"] = []
    st.session_state["search_items"] = []
    st.session_state["quantities"] = {}
    st.session_state["paid_input"] = 0.0
    st.session_state["sale_complete"] = False
    st.success("‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß")

# üõçÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
st.title("üßä ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
st.subheader("üõí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

product_names = df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist()
st.multiselect("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠", product_names, default=st.session_state["search_items"], key="search_items")

# ‚ûï‚ûñ ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
for p in st.session_state["search_items"]:
    if p not in st.session_state.quantities:
        st.session_state.quantities[p] = 1

    row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == p]
    stock = safe_int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"].values[0]) if not row.empty else 0

    cols = st.columns([3, 1, 1])
    with cols[0]:
        st.markdown(f"<b>{p}</b><br><span style='color:{text_color}'>üßä ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ: {stock}</span>", unsafe_allow_html=True)
        st.markdown(f"<span style='color:{text_color}'>üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {st.session_state.quantities[p]}</span>", unsafe_allow_html=True)
    with cols[1]:
        if st.button("‚ûñ", key=f"dec_{p}"):
            st.session_state.quantities[p] = max(1, st.session_state.quantities[p] - 1)
            st.rerun()
    with cols[2]:
        if st.button("‚ûï", key=f"inc_{p}"):
            st.session_state.quantities[p] += 1
            st.rerun()

# ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"):
    for p in st.session_state["search_items"]:
        qty = st.session_state.quantities[p]
        if qty > 0:
            st.session_state.cart.append((p, qty))
    st.success("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")

# üßæ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
if st.session_state.cart:
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
    total_price, total_profit = 0.0, 0.0
    for item, qty in st.session_state.cart:
        row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item].iloc[0]
        price = safe_float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"])
        cost = safe_float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"])
        total_price += qty * price
        total_profit += qty * (price - cost)
        st.write(f"- {item} x {qty} = {qty * price:.2f} ‡∏ö‡∏≤‡∏ó")

    st.info(f"üíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total_price:.2f} ‡∏ö‡∏≤‡∏ó | üü¢ ‡∏Å‡∏≥‡πÑ‡∏£: {total_profit:.2f} ‡∏ö‡∏≤‡∏ó")

    st.session_state.paid_input = st.number_input("üí∞ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", value=st.session_state.paid_input, step=1.0)
    if st.session_state.paid_input >= total_price:
        st.success(f"‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {st.session_state.paid_input - total_price:.2f} ‡∏ö‡∏≤‡∏ó")
    else:
        st.warning("üí∏ ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠")

    if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
        st.session_state.sale_trigger = True

# ‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á
if st.session_state.sale_trigger:
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    for item, qty in st.session_state.cart:
        index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item].index[0]
        idx_in_sheet = index + 2
        old_out = safe_int(df.at[index, "‡∏≠‡∏≠‡∏Å"])
        old_left = safe_int(df.at[index, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"])
        worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏≠‡∏≠‡∏Å") + 1, old_out + qty)
        worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ") + 1, old_left - qty)

    summary_ws.append_row([
        now,
        ", ".join([f"{i} x {q}" for i, q in st.session_state.cart]),
        total_price,
        total_profit,
        st.session_state.paid_input,
        st.session_state.paid_input - total_price,
        "drink"
    ])

    st.session_state.sale_complete = True
    st.session_state.sale_trigger = False
    st.rerun()
