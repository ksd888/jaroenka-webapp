import streamlit as st
import pandas as pd
import datetime
import gspread
from google.oauth2 import service_account
from reportlab.pdfgen import canvas
from io import BytesIO

# ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheets
credentials = service_account.Credentials.from_service_account_info(
    st.secrets["GCP_SERVICE_ACCOUNT"],
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
gc = gspread.authorize(credentials)
spreadsheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
sheet = spreadsheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
sheet_sales = spreadsheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
sheet_meta = spreadsheet.worksheet("Meta")

# ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
now_date = datetime.datetime.now().strftime("%Y-%m-%d")
try:
    last_date = sheet_meta.acell("B1").value
    if last_date != now_date:
        sheet.batch_update([{
            "range": "‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô!F2:G",
            "values": [["", ""] for _ in range(100)]
        }])
        sheet_meta.update("B1", [[now_date]])
except:
    sheet_meta.update("A1", [["last_date"]])
    sheet_meta.update("B1", [[now_date]])

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
data = sheet.get_all_records()
df = pd.DataFrame(data)

# ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ + ‡∏Ç‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
st.title("üíº ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ | ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
st.markdown("## üõí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô")

selected_items = []
col1, col2 = st.columns([2, 1])
with col1:
    search_query = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤").strip().lower()

with col2:
    money_received = st.number_input("üíµ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏ö‡∏≤‡∏ó)", min_value=0.0, step=1.0, value=0.0)

for index, row in df.iterrows():
    name = row["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]
    if search_query in name.lower():
        col1, col2 = st.columns([2, 1])
        with col1:
            qty = st.number_input(f"{name} (‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {row['‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ']})", min_value=0, step=1, key=name)
        with col2:
            if qty > 0:
                selected_items.append({
                    "index": index,
                    "name": name,
                    "qty": qty,
                    "price": row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"],
                    "cost": row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
                })

# ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
total = sum(item["qty"] * item["price"] for item in selected_items)
total_cost = sum(item["qty"] * item["cost"] for item in selected_items)
profit = total - total_cost
change = money_received - total

st.markdown(f"### üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:.2f} ‡∏ö‡∏≤‡∏ó")
st.markdown(f"### üíµ ‡∏ó‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {change:.2f} ‡∏ö‡∏≤‡∏ó" if change >= 0 else "‚ùå ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠")

# ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    for item in selected_items:
        idx = item["index"] + 2  # ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ header 1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏≠‡∏≠‡∏Å
        qty_old = df.loc[item["index"], "‡∏≠‡∏≠‡∏Å"]
        new_qty = qty_old + item["qty"]
        sheet.update_cell(idx, 7, new_qty)
        # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ
        remain = df.loc[item["index"], "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"] - item["qty"]
        sheet.update_cell(idx, 8, remain)
        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
        sheet_sales.append_row([
            now, item["name"], item["qty"], item["price"], item["cost"],
            item["price"] - item["cost"], item["qty"] * (item["price"] - item["cost"])
        ])

    st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    st.experimental_rerun()

# ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
st.markdown("---")
st.markdown("### ‚ûï ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏π‡πâ")
product_options = df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist()
product_selected = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", product_options)
add_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°", min_value=0, step=1)
if st.button("üì¶ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
    index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == product_selected].index[0]
    idx_excel = index + 2
    old_in = df.loc[index, "‡πÄ‡∏Ç‡πâ‡∏≤"]
    old_remain = df.loc[index, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]
    sheet.update_cell(idx_excel, 6, old_in + add_qty)
    sheet.update_cell(idx_excel, 8, old_remain + add_qty)
    st.success(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {product_selected} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    st.experimental_rerun()

# ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
if selected_items and st.button("üßæ ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à"):
    buffer = BytesIO()
    c = canvas.Canvas(buffer)
    c.drawString(100, 800, "üßä ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
    y = 780
    for item in selected_items:
        c.drawString(100, y, f"{item['name']} x {item['qty']} = {item['qty'] * item['price']} ‡∏ö‡∏≤‡∏ó")
        y -= 20
    c.drawString(100, y-10, f"‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total} ‡∏ö‡∏≤‡∏ó")
    c.drawString(100, y-30, f"‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏±‡∏ö: {money_received} ‡∏ö‡∏≤‡∏ó")
    c.drawString(100, y-50, f"‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change} ‡∏ö‡∏≤‡∏ó")
    c.showPage()
    c.save()
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à (PDF)", data=buffer.getvalue(), file_name="receipt.pdf")
