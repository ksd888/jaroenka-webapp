import streamlit as st
import gspread
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

# üîê ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(
    st.secrets["GCP_SERVICE_ACCOUNT"], scope
)
client = gspread.authorize(creds)
sheet = client.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
inventory_ws = sheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
sales_ws = sheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")

# üõ°Ô∏è helper ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
def safe_float(value):
    try:
        return float(value)
    except:
        return 0.0

def safe_int(value):
    try:
        return int(value)
    except:
        return 0

# üì• ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
data = inventory_ws.get_all_records()
products = []
for row in data:
    try:
        products.append({
            "‡∏ä‡∏∑‡πà‡∏≠": row.get("‡∏ä‡∏∑‡πà‡∏≠", ""),
            "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢": safe_float(row.get("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢", 0)),
            "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô": safe_float(row.get("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô", 0)),
            "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠": safe_int(row.get("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", 0)),
        })
    except Exception as e:
        st.warning(f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {e}")

st.title("üßä ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
st.subheader("üõçÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

cart = st.session_state.get("cart", [])

# ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö multiselect
selected_names = st.multiselect("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠", [p["‡∏ä‡∏∑‡πà‡∏≠"] for p in products])

# ‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
for p in selected_names:
    if f"qty_{p}" not in st.session_state:
        st.session_state[f"qty_{p}"] = 1
    col1, col2, col3 = st.columns([4, 1, 1])
    with col1:
        st.markdown(f"**{p}**")
    with col2:
        if st.button("‚ûñ", key=f"dec_{p}"):
            st.session_state[f"qty_{p}"] = max(1, st.session_state[f"qty_{p}"] - 1)
    with col3:
        if st.button("‚ûï", key=f"inc_{p}"):
            st.session_state[f"qty_{p}"] += 1

# ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"):
    for p in selected_names:
        qty = st.session_state.get(f"qty_{p}", 1)
        cart.append({"‡∏ä‡∏∑‡πà‡∏≠": p, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": qty})
    st.session_state["cart"] = cart
    st.success("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")

# üßæ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
st.subheader("üßæ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
total = 0
profit = 0
for item in cart:
    product = next((x for x in products if x["‡∏ä‡∏∑‡πà‡∏≠"] == item["‡∏ä‡∏∑‡πà‡∏≠"]), None)
    if product:
        line_total = product["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] * item["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]
        line_profit = (product["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] - product["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]) * item["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]
        st.markdown(f"- {item['‡∏ä‡∏∑‡πà‡∏≠']} x {item['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']} = {line_total:.2f} ‡∏ö‡∏≤‡∏ó")
        total += line_total
        profit += line_profit

st.info(f"üíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:.2f} ‡∏ö‡∏≤‡∏ó | üü¢ ‡∏Å‡∏≥‡πÑ‡∏£: {profit:.2f} ‡∏ö‡∏≤‡∏ó")

# üí∏ ‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏±‡∏ö
receive = st.number_input("üí∞ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", min_value=0.0, step=1.0)
change = receive - total
if change < 0:
    st.warning("üí∏ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠")
else:
    st.success(f"üíö ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")

# ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
if st.checkbox("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
    if cart and receive >= total:
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        for item in cart:
            row = [
                now,
                item["‡∏ä‡∏∑‡πà‡∏≠"],
                item["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"],
                next((p["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] for p in products if p["‡∏ä‡∏∑‡πà‡∏≠"] == item["‡∏ä‡∏∑‡πà‡∏≠"]), 0),
                next((p["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"] for p in products if p["‡∏ä‡∏∑‡πà‡∏≠"] == item["‡∏ä‡∏∑‡πà‡∏≠"]), 0),
                total,
                profit,
                "drink"
            ]
            sales_ws.append_row(row)

            # üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            cell = inventory_ws.find(item["‡∏ä‡∏∑‡πà‡∏≠"])
            if cell:
                current_qty = safe_int(inventory_ws.cell(cell.row, cell.col + 3).value)
                inventory_ws.update_cell(cell.row, cell.col + 3, current_qty - item["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"])

        # üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï cart
        for p in selected_names:
            del st.session_state[f"qty_{p}"]
        st.session_state["cart"] = []
        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

        # üîÅ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        st.experimental_rerun()

# üì¶ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
st.markdown("---")
st.subheader("üì¶ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
for p in [x["‡∏ä‡∏∑‡πà‡∏≠"] for x in products]:
    qty = st.number_input(f"‡πÄ‡∏ï‡∏¥‡∏° {p}", min_value=0, key=f"‡πÄ‡∏ï‡∏¥‡∏°_{p}")
    if qty > 0:
        cell = inventory_ws.find(p)
        if cell:
            now_qty = safe_int(inventory_ws.cell(cell.row, cell.col + 3).value)
            inventory_ws.update_cell(cell.row, cell.col + 3, now_qty + qty)
        st.success(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° {p} ‡πÅ‡∏•‡πâ‡∏ß +{qty}")

# ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
st.markdown("---")
st.subheader("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
edit_product = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", [p["‡∏ä‡∏∑‡πà‡∏≠"] for p in products])
new_price = st.number_input("üìå ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà", min_value=0.0, step=1.0, value=safe_float(
    next((x["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] for x in products if x["‡∏ä‡∏∑‡πà‡∏≠"] == edit_product), 0)))
new_cost = st.number_input("üí∞ ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÉ‡∏´‡∏°‡πà", min_value=0.0, step=1.0, value=safe_float(
    next((x["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"] for x in products if x["‡∏ä‡∏∑‡πà‡∏≠"] == edit_product), 0)))
if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"):
    cell = inventory_ws.find(edit_product)
    if cell:
        inventory_ws.update_cell(cell.row, cell.col + 1, new_price)
        inventory_ws.update_cell(cell.row, cell.col + 2, new_cost)
        st.success("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        st.experimental_rerun()
