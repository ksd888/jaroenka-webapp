import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

# ---------------------- Utils ------------------------
def safe_float(value):
    try:
        return float(str(value).strip())
    except (ValueError, TypeError):
        return 0.0

def safe_int(value):
    try:
        return int(float(str(value).strip()))
    except (ValueError, TypeError):
        return 0

def safe_get(row, key):
    return row[key] if key in row else ""

# ---------------------- Auth ------------------------
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_info(st.secrets["GCP_SERVICE_ACCOUNT"], scopes=scope)
client = gspread.authorize(creds)

sheet_id = "1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE"
sheet = client.open_by_key(sheet_id).worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
sales_sheet = client.open_by_key(sheet_id).worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")

# ---------------------- Load Data ------------------------
data = sheet.get_all_records()

products = []
for row in data:
    try:
        product = {
            "‡∏ä‡∏∑‡πà‡∏≠": safe_get(row, "‡∏ä‡∏∑‡πà‡∏≠"),
            "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢": safe_float(safe_get(row, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢")),
            "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô": safe_float(safe_get(row, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô")),
            "‡∏Å‡∏≥‡πÑ‡∏£/‡∏´‡∏ô‡πà‡∏ß‡∏¢": safe_float(safe_get(row, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢")) - safe_float(safe_get(row, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô")),
            "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠": safe_int(safe_get(row, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠")),
            "‡πÄ‡∏Ç‡πâ‡∏≤": safe_int(safe_get(row, "‡πÄ‡∏Ç‡πâ‡∏≤")),
            "‡∏≠‡∏≠‡∏Å": safe_int(safe_get(row, "‡∏≠‡∏≠‡∏Å")),
        }
        products.append(product)
    except Exception as e:
        st.warning(f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {e}")

# ---------------------- UI ------------------------
st.title("üßä ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")

st.subheader("üõí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
search_mode = st.toggle("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠")

if search_mode:
    selected_names = st.multiselect("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ç‡∏≤‡∏¢", [p["‡∏ä‡∏∑‡πà‡∏≠"] for p in products])
    selected_products = [p for p in products if p["‡∏ä‡∏∑‡πà‡∏≠"] in selected_names]
else:
    selected_products = []
    for p in products:
        if st.checkbox(p["‡∏ä‡∏∑‡πà‡∏≠"], key=p["‡∏ä‡∏∑‡πà‡∏≠"]):
            selected_products.append(p)

quantities = {}
for p in selected_products:
    col1, col2, col3 = st.columns([3, 1, 1])
    with col1:
        st.write(p["‡∏ä‡∏∑‡πà‡∏≠"])
    with col2:
        if f"qty_{p['‡∏ä‡∏∑‡πà‡∏≠']}" not in st.session_state:
            st.session_state[f"qty_{p['‡∏ä‡∏∑‡πà‡∏≠']}"] = 1
        if st.button("‚ûñ", key=f"dec_{p['‡∏ä‡∏∑‡πà‡∏≠']}"):
            st.session_state[f"qty_{p['‡∏ä‡∏∑‡πà‡∏≠']}"] = max(1, st.session_state[f"qty_{p['‡∏ä‡∏∑‡πà‡∏≠']}] - 1)
    with col3:
        if st.button("‚ûï", key=f"inc_{p['‡∏ä‡∏∑‡πà‡∏≠']}"):
            st.session_state[f"qty_{p['‡∏ä‡∏∑‡πà‡∏≠']}"] += 1

    quantities[p["‡∏ä‡∏∑‡πà‡∏≠"]] = st.session_state[f"qty_{p['‡∏ä‡∏∑‡πà‡∏≠']}"]

if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"):
    if "cart" not in st.session_state:
        st.session_state.cart = {}
    for name, qty in quantities.items():
        if name in st.session_state.cart:
            st.session_state.cart[name] += qty
        else:
            st.session_state.cart[name] = qty

# ---------------------- ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ------------------------
st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")

total = 0
profit = 0
lines = []

if "cart" in st.session_state:
    for name, qty in st.session_state.cart.items():
        product = next((p for p in products if p["‡∏ä‡∏∑‡πà‡∏≠"] == name), None)
        if product:
            line_total = product["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] * qty
            line_profit = (product["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] - product["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]) * qty
            total += line_total
            profit += line_profit
            lines.append(f"- {name} x {qty} = {line_total:.2f} ‡∏ö‡∏≤‡∏ó")

for line in lines:
    st.write(line)

st.markdown(f"üíµ **‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:** {total:.2f} ‡∏ö‡∏≤‡∏ó | üü¢ **‡∏Å‡∏≥‡πÑ‡∏£:** {profit:.2f} ‡∏ö‡∏≤‡∏ó")

# ---------------------- ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô ------------------------
money = st.number_input("üí∞ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", value=0.0, step=1.0)
if money < total:
    st.warning("üí∏ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠")
else:
    change = money - total
    st.success(f"üí¥ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")

# ---------------------- ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ ------------------------
if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    for name, qty in st.session_state.cart.items():
        product_index = next((i for i, p in enumerate(products) if p["‡∏ä‡∏∑‡πà‡∏≠"] == name), None)
        if product_index is not None:
            row_number = product_index + 2  # ‡∏ö‡∏ß‡∏Å 2 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ header + index ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0
            out_cell = f"G{row_number}"
            remain_cell = f"H{row_number}"
            out_value = sheet.acell(out_cell).value
            new_out = safe_int(out_value) + qty
            new_remain = products[product_index]["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] - qty
            sheet.update(out_cell, [[new_out]])
            sheet.update(remain_cell, [[new_remain]])

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Sheet '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'
    sales_sheet.append_row([
        now, 
        ", ".join([f"{name} x {qty}" for name, qty in st.session_state.cart.items()]),
        total, profit
    ])

    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
    st.session_state.cart = {}
    for k in list(st.session_state.keys()):
        if k.startswith("qty_"):
            del st.session_state[k]

    st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
