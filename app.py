import streamlit as st
import gspread
from google.oauth2 import service_account
from datetime import datetime
from reportlab.pdfgen import canvas
import io

# Auth
credentials = service_account.Credentials.from_service_account_info(
    st.secrets["GCP_SERVICE_ACCOUNT"]
)
gc = gspread.authorize(credentials)

# ‡πÉ‡∏ä‡πâ Spreadsheet ID
spreadsheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
sheet = spreadsheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
sheet_sales = spreadsheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
sheet_meta = spreadsheet.worksheet("Meta")  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å
now_date = datetime.now().strftime("%Y-%m-%d")
try:
    last_date = sheet_meta.acell("B1").value
    if last_date != now_date:
        sheet.update("F2:F", [[""]]*1000)  # ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡πÄ‡∏Ç‡πâ‡∏≤
        sheet.update("G2:G", [[""]]*1000)  # ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡∏≠‡∏≠‡∏Å
        sheet_meta.update("B1", [[now_date]])
except:
    sheet_meta.update("A1", [[ "last_date" ]])
    sheet_meta.update("B1", [[now_date]])

# ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
data = sheet.get_all_records()
product_names = [row["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] for row in data]

st.title("üíº ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤ (‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô)")

st.markdown("### üõí ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

selected_items = st.multiselect("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", product_names)
quantities = {}
for item in selected_items:
    qty = st.number_input(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢: {item}", min_value=1, step=1, key=f"qty_{item}")
    quantities[item] = qty

customer_paid = st.number_input("üíµ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)", min_value=0.0, step=1.0)

# ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
if st.button("‚úÖ ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
    total = 0
    total_cost = 0
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    summary_lines = []

    for item, qty in quantities.items():
        for row_idx, row in enumerate(data, start=2):
            if row["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item:
                price = row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]
                cost = row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
                profit = (price - cost) * qty
                total += price * qty
                total_cost += cost * qty

                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏≠‡∏≠‡∏Å' ‡πÅ‡∏•‡∏∞ '‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ'
                new_out = row["‡∏≠‡∏≠‡∏Å"] + qty if isinstance(row["‡∏≠‡∏≠‡∏Å"], int) else qty
                remaining = row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] + row["‡πÄ‡∏Ç‡πâ‡∏≤"] - new_out

                sheet.update(f"G{row_idx}", new_out)
                sheet.update(f"H{row_idx}", remaining)

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ä‡∏µ‡∏ó‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
                sheet_sales.append_row([
                    now, item, qty, price, cost, price - cost, profit
                ])
                summary_lines.append(f"{item} x{qty} = {price * qty} ‡∏ö‡∏≤‡∏ó")
                break

    change = customer_paid - total
    st.success(f"‚úÖ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:.2f} ‡∏ö‡∏≤‡∏ó / ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")

    # ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF
    buffer = io.BytesIO()
    pdf = canvas.Canvas(buffer)
    pdf.setFont("Helvetica", 12)
    pdf.drawString(100, 800, f"‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
    pdf.drawString(100, 780, f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {now}")
    y = 750
    for line in summary_lines:
        pdf.drawString(100, y, line)
        y -= 20
    pdf.drawString(100, y-20, f"‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô: {total:.2f} ‡∏ö‡∏≤‡∏ó")
    pdf.drawString(100, y-40, f"‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")
    pdf.save()

    st.download_button("üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF", data=buffer.getvalue(), file_name="receipt.pdf")

    # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
    st.experimental_rerun()

# ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
st.markdown("### ‚ûï ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏π‡πâ")
with st.expander("üì¶ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏¥‡∏°"):
    for i, row in enumerate(data, start=2):
        qty = st.number_input(f"‡πÄ‡∏ï‡∏¥‡∏° {row['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤']}", min_value=0, step=1, key=f"in_{i}")
        if qty > 0:
            new_in = row["‡πÄ‡∏Ç‡πâ‡∏≤"] + qty if isinstance(row["‡πÄ‡∏Ç‡πâ‡∏≤"], int) else qty
            sheet.update(f"F{i}", new_in)
            remaining = row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] + new_in - row["‡∏≠‡∏≠‡∏Å"]
            sheet.update(f"H{i}", remaining)
            st.success(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° {row['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤']} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {qty} ‡πÅ‡∏•‡πâ‡∏ß")
