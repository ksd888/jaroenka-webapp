import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
import pandas as pd

# --- ‡πÇ‡∏´‡∏•‡∏î credentials ‡∏à‡∏≤‡∏Å secrets ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets",
         "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_info(st.secrets["GCP_SERVICE_ACCOUNT"], scopes=scope)
client = gspread.authorize(creds)

# --- ‡πÄ‡∏õ‡∏¥‡∏î Google Sheet ---
spreadsheet = client.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
sheet = spreadsheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
sheet_meta = spreadsheet.worksheet("Meta")
sheet_sales = spreadsheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")

# --- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ---
now_date = datetime.now().strftime("%Y-%m-%d")
last_date = sheet_meta.acell("B1").value
if last_date != now_date:
    sheet.batch_update([{
        'range': 'F2:G1000',
        'values': [[0, 0]] * 999
    }])
    sheet_meta.update("B1", [[now_date]])

# --- ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó ---
data = sheet.get_all_records()
df = pd.DataFrame(data)
product_names = df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist()

# --- Session state ---
if "cart" not in st.session_state:
    st.session_state.cart = []

# --- UI ---
st.title("üßä ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
st.subheader("üõí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")

# --- ‡∏£‡∏∞‡∏ö‡∏ö autocomplete + ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß ---
col1, col2 = st.columns([3, 1])
with col1:
    new_product = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏Ñ‡πâ‡∏Å, ‡∏Ñ‡∏≤‡∏£‡∏≤‡∏ö‡∏≤‡∏ß...")
with col2:
    qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", min_value=1, step=1, key="qty_input")

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î +
if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°"):
    match = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].str.contains(new_product, case=False, na=False)]
    if not match.empty:
        item = match.iloc[0]
        st.session_state.cart.append({
            "name": item["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"],
            "qty": qty,
            "price": item["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"],
            "cost": item["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
        })
        st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {item['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤']} x {qty} ‡πÅ‡∏•‡πâ‡∏ß")
    else:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ---
if st.session_state.cart:
    st.subheader("üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
    total, total_profit = 0, 0
    for item in st.session_state.cart:
        subtotal = item["qty"] * item["price"]
        profit = item["qty"] * (item["price"] - item["cost"])
        total += subtotal
        total_profit += profit
        st.write(f"- {item['name']} x {item['qty']} = {subtotal} ‡∏ö‡∏≤‡∏ó")

    st.info(f"üíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total} ‡∏ö‡∏≤‡∏ó | üü¢ ‡∏Å‡∏≥‡πÑ‡∏£: {total_profit} ‡∏ö‡∏≤‡∏ó")
    paid = st.number_input("üí∞ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", min_value=0, step=1, key="paid_amount")
    if paid >= total:
        st.success(f"‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {paid - total} ‡∏ö‡∏≤‡∏ó")
    else:
        st.warning("üí° ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏≠")

    if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
        for item in st.session_state.cart:
            idx = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item["name"]].index[0] + 2
            old_out = int(sheet.cell(idx, 7).value or 0)
            old_left = int(sheet.cell(idx, 5).value or 0)
            sheet.update_cell(idx, 7, old_out + item["qty"])
            sheet.update_cell(idx, 5, old_left - item["qty"])
            sheet_sales.append_row([
                str(now_date),
                str(item["name"]),
                int(item["qty"]),
                float(item["qty"] * item["price"]),
                float(item["qty"] * (item["price"] - item["cost"]))
            ])
        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        st.session_state.cart.clear()

# --- ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ---
st.header("üì¶ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
colx1, colx2 = st.columns([3, 1])
with colx1:
    restock_product = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏¥‡∏°", key="restock_input", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏•‡∏¥‡πÇ‡∏û, ‡∏ô‡πâ‡∏≥‡∏ñ‡∏±‡∏á")
with colx2:
    restock_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", min_value=1, step=1, key="restock_qty")

if st.button("üì• ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏ï‡∏¥‡∏°"):
    match = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].str.contains(restock_product, case=False, na=False)]
    if not match.empty:
        idx = match.index[0] + 2
        old_in = int(sheet.cell(idx, 6).value or 0)
        old_left = int(sheet.cell(idx, 5).value or 0)
        sheet.update_cell(idx, 6, old_in + restock_qty)
        sheet.update_cell(idx, 5, old_left + restock_qty)
        st.success(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° {match.iloc[0]['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤']} ‡πÅ‡∏•‡πâ‡∏ß")
    else:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏¥‡∏°")
