import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
from datetime import datetime

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
def safe_key(text):
    return text.replace(" ", "_").replace(".", "_").replace("-", "_").replace("/", "_")

def safe_float(val):
    try:
        return float(val)
    except:
        return 0.0

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheet
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_info(st.secrets["GCP_SERVICE_ACCOUNT"], scopes=scope)
gc = gspread.authorize(creds)
spreadsheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
sheet = spreadsheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")

# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
data = sheet.get_all_records()
products = []
for row in data:
    if row.get("‡∏ä‡∏∑‡πà‡∏≠"):
        products.append({
            "‡∏ä‡∏∑‡πà‡∏≠": row["‡∏ä‡∏∑‡πà‡∏≠"],
            "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢": safe_float(row.get("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢", 0)),
            "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô": safe_float(row.get("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô", 0)),
            "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠": safe_float(row.get("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", 0)),
            "‡πÄ‡∏Ç‡πâ‡∏≤": safe_float(row.get("‡πÄ‡∏Ç‡πâ‡∏≤", 0)),
            "‡∏≠‡∏≠‡∏Å": safe_float(row.get("‡∏≠‡∏≠‡∏Å", 0)),
        })

# ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ session
if "cart" not in st.session_state:
    st.session_state.cart = {}

st.title("üßä ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

# ---------------------- ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ + ‡∏Ç‡∏≤‡∏¢ --------------------
search = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
filtered_products = [p for p in products if search in p["‡∏ä‡∏∑‡πà‡∏≠"]] if search else products

for p in filtered_products:
    qty_key = f"qty_{safe_key(p['‡∏ä‡∏∑‡πà‡∏≠'])}"
    sub_key = f"sub_{qty_key}"
    add_key = f"add_{qty_key}"
    cart_key = f"addcart_{qty_key}"

    if qty_key not in st.session_state:
        st.session_state[qty_key] = 1

    st.markdown(f"**{p['‡∏ä‡∏∑‡πà‡∏≠']}** - {p['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢']} ‡∏ö‡∏≤‡∏ó")
    cols = st.columns([1, 1, 1, 2])
    with cols[0]:
        if st.button("-", key=sub_key):
            st.session_state[qty_key] = max(1, st.session_state[qty_key] - 1)
    with cols[1]:
        st.write(st.session_state[qty_key])
    with cols[2]:
        if st.button("+", key=add_key):
            st.session_state[qty_key] += 1
    with cols[3]:
        if st.button("‚ûï ‡πÉ‡∏™‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", key=cart_key):
            st.session_state.cart[p["‡∏ä‡∏∑‡πà‡∏≠"]] = st.session_state.cart.get(p["‡∏ä‡∏∑‡πà‡∏≠"], 0) + st.session_state[qty_key]

st.divider()
st.header("üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

if st.session_state.cart:
    total = 0
    cost_total = 0
    for name, qty in st.session_state.cart.items():
        prod = next((p for p in products if p["‡∏ä‡∏∑‡πà‡∏≠"] == name), None)
        if not prod:
            continue
        price = prod["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] * qty
        cost = prod["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"] * qty
        profit = price - cost
        total += price
        cost_total += cost
        st.write(f"- {name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {qty} ‡∏ä‡∏¥‡πâ‡∏ô = {price:.2f} ‡∏ö‡∏≤‡∏ó")

    st.write(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:.2f} ‡∏ö‡∏≤‡∏ó")
    st.write(f"üìà ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: {total - cost_total:.2f} ‡∏ö‡∏≤‡∏ó")

    confirm = st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
    if confirm:
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        sale_sheet = spreadsheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
        for name, qty in st.session_state.cart.items():
            prod = next((p for p in products if p["‡∏ä‡∏∑‡πà‡∏≠"] == name), None)
            if prod:
                sale_sheet.append_row([
                    now, name, qty, prod["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"], prod["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"],
                    prod["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] * qty, (prod["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] - prod["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]) * qty,
                    "drink"
                ])

                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó‡∏´‡∏•‡∏±‡∏Å
                row_index = next((i for i, r in enumerate(data) if r.get("‡∏ä‡∏∑‡πà‡∏≠") == name), None)
                if row_index is not None:
                    out_cell = f"G{row_index + 2}"
                    new_out = data[row_index]["‡∏≠‡∏≠‡∏Å"] + qty
                    sheet.update(out_cell, [[new_out]])

                    remain_cell = f"E{row_index + 2}"
                    new_remain = data[row_index]["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] - qty
                    sheet.update(remain_cell, [[new_remain]])

        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        st.session_state.cart.clear()
        for p in products:
            qty_key = f"qty_{safe_key(p['‡∏ä‡∏∑‡πà‡∏≠'])}"
            if qty_key in st.session_state:
                st.session_state[qty_key] = 1

# ----------------- ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ --------------------
with st.expander("üì¶ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤"):
    for p in products:
        qty = st.number_input(f"‡πÄ‡∏ï‡∏¥‡∏° {p['‡∏ä‡∏∑‡πà‡∏≠']}", min_value=0, key=f"‡πÄ‡∏ï‡∏¥‡∏°_{safe_key(p['‡∏ä‡∏∑‡πà‡∏≠'])}")
        if qty > 0:
            idx = next((i for i, r in enumerate(data) if r["‡∏ä‡∏∑‡πà‡∏≠"] == p["‡∏ä‡∏∑‡πà‡∏≠"]), None)
            if idx is not None:
                in_cell = f"F{idx + 2}"
                new_in = data[idx]["‡πÄ‡∏Ç‡πâ‡∏≤"] + qty
                sheet.update(in_cell, [[new_in]])

                remain_cell = f"E{idx + 2}"
                new_remain = data[idx]["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] + qty
                sheet.update(remain_cell, [[new_remain]])
            st.success(f"‡πÄ‡∏ï‡∏¥‡∏° {p['‡∏ä‡∏∑‡πà‡∏≠']} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {qty} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
