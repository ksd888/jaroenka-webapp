import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å secrets ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå service_account.json
creds = Credentials.from_service_account_info(
    st.secrets["GCP_SERVICE_ACCOUNT"], scopes=SCOPES
)
gc = gspread.authorize(creds)

# ‡πÄ‡∏õ‡∏¥‡∏î Google Sheet
spreadsheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
sheet = spreadsheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google Sheet
data = sheet.get_all_records()
df = pd.DataFrame(data)

st.title("üßä ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
def safe_key(key):
    return key.replace(" ", "_").replace(".", "_")

# ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
search_term = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", key="search")
filtered_df = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].str.contains(search_term, case=False, na=False)] if search_term else df

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô session state
if "cart" not in st.session_state:
    st.session_state.cart = {}

# ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
selected_products = st.multiselect("üõí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠", filtered_df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist())

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
for p in selected_products:
    row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == p].iloc[0]
    col1, col2, col3 = st.columns([3,1,1])
    with col1:
        st.markdown(f"**{row['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤']}**")
    with col2:
        if st.button("-", key=f"sub_{safe_key(p)}"):
            st.session_state.cart[p] = max(0, st.session_state.cart.get(p, 1) - 1)
    with col3:
        if st.button("+", key=f"add_{safe_key(p)}"):
            st.session_state.cart[p] = st.session_state.cart.get(p, 0) + 1

    if p in st.session_state.cart:
        st.markdown(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {st.session_state.cart[p]}")

    st.divider()

if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"):
    st.success("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")

# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
if st.session_state.cart:
    st.markdown("üìã **‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢**")
    total = 0
    profit = 0
    for name, qty in st.session_state.cart.items():
        row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == name].iloc[0]
        price = row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]
        cost = row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
        st.write(f"{name} x {qty} = {qty * price:.2f} ‡∏ö‡∏≤‡∏ó")
        total += qty * price
        profit += qty * (price - cost)
    st.info(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:.2f} ‡∏ö‡∏≤‡∏ó   üü¢ ‡∏Å‡∏≥‡πÑ‡∏£: {profit:.2f} ‡∏ö‡∏≤‡∏ó")

    cash = st.number_input("üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏±‡∏ö", min_value=0.0, format="%.2f")
    if cash < total:
        st.warning("‚ùå ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠")
    else:
        change = cash - total
        st.success(f"‚úÖ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")

    if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        for name, qty in st.session_state.cart.items():
            row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == name].iloc[0]
            price = row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]
            cost = row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
            sheet_to_write = spreadsheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
            sheet_to_write.append_row([now, name, qty, price, cost, price - cost, qty * (price - cost)])
        st.success("üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        st.session_state.cart = {}
        st.experimental_rerun()
