
import streamlit as st
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ----------
def safe_float(val):
    try:
        return float(val)
    except:
        return 0.0

def safe_int(val):
    try:
        return int(val)
    except:
        return 0

# ---------- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheet ----------
scope = ["https://spreadsheets.google.com/feeds",'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)

spreadsheet_id = "1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE"
sheet = client.open_by_key(spreadsheet_id).worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")

# ---------- ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ----------
data = sheet.get_all_records()
products = []
for row in data:
    try:
        products.append({
            "‡∏ä‡∏∑‡πà‡∏≠": row.get("‡∏ä‡∏∑‡πà‡∏≠", ""),
            "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢": safe_float(row.get("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢")),
            "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô": safe_float(row.get("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô")),
            "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠": safe_int(row.get("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", 0)),
            "‡∏≠‡∏≠‡∏Å": safe_int(row.get("‡∏≠‡∏≠‡∏Å", 0)),
        })
    except Exception as e:
        st.warning(f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {e}")

# ---------- UI ----------
st.title("üßä ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")

st.subheader("üõí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
selected_names = st.multiselect("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ç‡∏≤‡∏¢", [p["‡∏ä‡∏∑‡πà‡∏≠"] for p in products])
quantity_dict = {}

for name in selected_names:
    col1, col2 = st.columns([2, 1])
    with col1:
        st.write(name)
    with col2:
        quantity = st.number_input(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô - {name}", min_value=0, step=1, key=f"qty_{name}")
        quantity_dict[name] = quantity

# ---------- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î ----------
st.markdown("## üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
total = 0.0
profit = 0.0
for name, qty in quantity_dict.items():
    if qty > 0:
        product = next((p for p in products if p["‡∏ä‡∏∑‡πà‡∏≠"] == name), None)
        if product:
            line_total = product["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] * qty
            line_profit = (product["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] - product["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]) * qty
            total += line_total
            profit += line_profit
            st.write(f"- {name} x {qty} = {line_total:.2f} ‡∏ö‡∏≤‡∏ó")

st.info(f"üíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:.2f} ‡∏ö‡∏≤‡∏ó | üü¢ ‡∏Å‡∏≥‡πÑ‡∏£: {profit:.2f} ‡∏ö‡∏≤‡∏ó")

money_received = st.number_input("üí∞ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", min_value=0.0, step=1.0)
change = money_received - total
if change < 0:
    st.warning("üßæ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠")
else:
    st.success(f"‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")

# ---------- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ ----------
if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    for name, qty in quantity_dict.items():
        if qty > 0:
            try:
                cell = sheet.find(name)
                out_cell = f"G{cell.row}"
                out_value = safe_int(sheet.acell(out_cell).value)
                new_out = out_value + qty
                sheet.update(out_cell, [[new_out]])

                remain_cell = f"E{cell.row}"
                remain_value = safe_int(sheet.acell(remain_cell).value)
                new_remain = remain_value - qty
                sheet.update(remain_cell, [[new_remain]])
            except Exception as e:
                st.warning(f"‚ùó ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {name} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

    st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
    st.experimental_rerun()
