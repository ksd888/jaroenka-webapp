import streamlit as st
import pandas as pd
import datetime
import gspread
from google.oauth2 import service_account
from reportlab.pdfgen import canvas
from io import BytesIO
import base64

# --- CONFIG ---
SPREADSHEET_ID = "1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE"
SHEET_MAIN = "‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô"
SHEET_SALES = "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢"
SHEET_META = "Meta"

# --- AUTH ---
credentials = service_account.Credentials.from_service_account_info(
    st.secrets["GCP_SERVICE_ACCOUNT"],
    scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
)
gc = gspread.authorize(credentials)
spreadsheet = gc.open_by_key(SPREADSHEET_ID)
sheet_main = spreadsheet.worksheet(SHEET_MAIN)
sheet_sales = spreadsheet.worksheet(SHEET_SALES)
sheet_meta = spreadsheet.worksheet(SHEET_META)

# --- DATE RESET CHECK ---
now_date = datetime.datetime.now().strftime("%Y-%m-%d")
try:
    last_date = sheet_meta.acell("B1").value
except:
    last_date = ""
if last_date != now_date:
    sheet_main.batch_update([{
        "range": "C2:D",
        "values": [["0", "0"]] * len(sheet_main.get_all_values())
    }])
    sheet_meta.update("A1", [["last_date"]])
    sheet_meta.update("B1", [[now_date]])

# --- LOAD DATA ---
df = pd.DataFrame(sheet_main.get_all_records())
for col in ["‡πÄ‡∏Ç‡πâ‡∏≤", "‡∏≠‡∏≠‡∏Å", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]:
    df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0)

df["‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] = df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] - df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
df["‡∏Å‡∏≥‡πÑ‡∏£"] = df["‡∏≠‡∏≠‡∏Å"] * df["‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"]

# --- UI HEADER ---
st.title("üßä ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤: ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
st.markdown("üõí *‡∏Ç‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ / ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πä‡∏≠‡∏Å / ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à / ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥*")

# --- MULTI-SELL SYSTEM ---
st.subheader("üõçÔ∏è ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
selected_items = st.multiselect("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist())
quantities = {}
for item in selected_items:
    qty = st.number_input(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢: {item}", min_value=0, step=1, key=item)
    quantities[item] = qty

if st.button("‚úÖ ‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"):
    total = 0
    profit_total = 0
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    for item, qty in quantities.items():
        idx = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item].index[0]
        if df.at[idx, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"] >= qty and qty > 0:
            df.at[idx, "‡∏≠‡∏≠‡∏Å"] += qty
            profit = qty * df.at[idx, "‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"]
            sheet_sales.append_row([
                now, item, int(qty),
                float(df.at[idx, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]),
                float(df.at[idx, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]),
                float(df.at[idx, "‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"]),
                float(profit)
            ])
            df.at[idx, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"] -= qty
            total += qty * df.at[idx, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]
            profit_total += profit

    st.success(f"‚úÖ ‡∏Ç‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:,.2f} ‡∏ö‡∏≤‡∏ó | ‡∏Å‡∏≥‡πÑ‡∏£: {profit_total:,.2f} ‡∏ö‡∏≤‡∏ó")
    st.session_state["receipt"] = (now, quantities, total, profit_total)
    sheet_main.update([df.columns.tolist()] + df.values.tolist())

# --- RECEIPT ---
if "receipt" in st.session_state:
    st.subheader("üßæ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    now, quantities, total, profit_total = st.session_state["receipt"]

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
    buffer = BytesIO()
    c = canvas.Canvas(buffer)
    c.drawString(100, 800, f"‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤ - ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ({now})")
    y = 780
    for item, qty in quantities.items():
        if qty > 0:
            price = float(df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item]["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"].values[0])
            c.drawString(100, y, f"{item} x{qty} = {qty*price:.2f} ‡∏ö‡∏≤‡∏ó")
            y -= 20
    c.drawString(100, y-10, f"‡∏£‡∏ß‡∏°: {total:.2f} ‡∏ö‡∏≤‡∏ó | ‡∏Å‡∏≥‡πÑ‡∏£: {profit_total:.2f} ‡∏ö‡∏≤‡∏ó")
    c.save()
    buffer.seek(0)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    b64 = base64.b64encode(buffer.read()).decode()
    href = f'<a href="data:application/pdf;base64,{b64}" download="receipt.pdf">üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à (PDF)</a>'
    st.markdown(href, unsafe_allow_html=True)

# --- ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πä‡∏≠‡∏Å ---
st.subheader("‚ûï ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏π‡πâ")
col1, col2 = st.columns(2)
with col1:
    add_item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist(), key="add")
with col2:
    add_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°", min_value=0, step=1, key="add_qty")
if st.button("üì• ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πä‡∏≠‡∏Å"):
    idx = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == add_item].index[0]
    df.at[idx, "‡πÄ‡∏Ç‡πâ‡∏≤"] += add_qty
    df.at[idx, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"] += add_qty
    sheet_main.update([df.columns.tolist()] + df.values.tolist())
    st.success(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß {add_item} +{add_qty} ‡∏ä‡∏¥‡πâ‡∏ô")

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° ---
st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£")
total_sales = (df["‡∏≠‡∏≠‡∏Å"] * df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]).sum()
total_profit = df["‡∏Å‡∏≥‡πÑ‡∏£"].sum()
st.metric("üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{total_sales:,.2f} ‡∏ö‡∏≤‡∏ó")
st.metric("üìà ‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°", f"{total_profit:,.2f} ‡∏ö‡∏≤‡∏ó")

# --- Responsive UI Note ---
st.markdown("üì± *UI ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö iPad / ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ / ‡πÄ‡∏î‡∏™‡∏Å‡πå‡∏ó‡πá‡∏≠‡∏õ*")
