import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import re

st.set_page_config(page_title="‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", layout="centered")

# ‡πÉ‡∏ä‡πâ safe float ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
def safe_float(value):
    try:
        return float(value)
    except (ValueError, TypeError):
        return 0.0

# ‡∏ó‡∏≥‡πÉ‡∏´‡πâ key ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Streamlit
def safe_key(s):
    return re.sub(r"[^\w\s]", "_", str(s))

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(st.secrets["GCP_SERVICE_ACCOUNT"], scope)
gc = gspread.authorize(credentials)
sh = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
sheet = sh.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
sales_sheet = sh.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
data = sheet.get_all_records()

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô DataFrame
df = pd.DataFrame(data)

# ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢/‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] = df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"].apply(safe_float)
df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"] = df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"].apply(safe_float)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô dict
products = []
for row in df.to_dict(orient="records"):
    products.append({
        "‡∏ä‡∏∑‡πà‡∏≠": row.get("‡∏ä‡∏∑‡πà‡∏≠", ""),
        "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠": safe_float(row.get("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", 0)),
        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢": safe_float(row.get("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢", 0)),
        "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô": safe_float(row.get("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô", 0))
    })

st.title("üßä ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

# Multi-select ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
selected_names = st.multiselect("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠", [p["‡∏ä‡∏∑‡πà‡∏≠"] for p in products])

# ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
st.subheader("üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

if "cart" not in st.session_state:
    st.session_state.cart = {}

for p in products:
    if p["‡∏ä‡∏∑‡πà‡∏≠"] in selected_names:
        col1, col2, col3 = st.columns([1, 1, 1])
        with col1:
            if st.button("-", key=f"sub_{safe_key(p['‡∏ä‡∏∑‡πà‡∏≠'])}"):
                st.session_state.cart[p["‡∏ä‡∏∑‡πà‡∏≠"]] = max(1, st.session_state.cart.get(p["‡∏ä‡∏∑‡πà‡∏≠"], 1) - 1)
        with col2:
            qty = st.session_state.cart.get(p["‡∏ä‡∏∑‡πà‡∏≠"], 1)
            st.write(f"{p['‡∏ä‡∏∑‡πà‡∏≠']} x {qty}")
        with col3:
            if st.button("+", key=f"add_{safe_key(p['‡∏ä‡∏∑‡πà‡∏≠'])}"):
                st.session_state.cart[p["‡∏ä‡∏∑‡πà‡∏≠"]] = st.session_state.cart.get(p["‡∏ä‡∏∑‡πà‡∏≠"], 1) + 1
        st.markdown("---")

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
total_price = 0
total_cost = 0
for name, qty in st.session_state.cart.items():
    product = next((p for p in products if p["‡∏ä‡∏∑‡πà‡∏≠"] == name), None)
    if product:
        line_price = product["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] * qty
        line_cost = product["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"] * qty
        total_price += line_price
        total_cost += line_cost
        st.write(f"{name} x {qty} = {line_price:.2f} ‡∏ö‡∏≤‡∏ó")

st.info(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total_price:.2f} ‡∏ö‡∏≤‡∏ó üåè ‡∏Å‡∏≥‡πÑ‡∏£: {total_price - total_cost:.2f} ‡∏ö‡∏≤‡∏ó")

# ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
money = st.number_input("üí∏ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", min_value=0.0, value=0.0)
if money < total_price:
    st.warning("üí∏ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠")
else:
    change = money - total_price
    st.success(f"‚úÖ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")

# ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    for name, qty in st.session_state.cart.items():
        product = next((p for p in products if p["‡∏ä‡∏∑‡πà‡∏≠"] == name), None)
        if product:
            try:
                idx = df.index[df["‡∏ä‡∏∑‡πà‡∏≠"] == name].tolist()[0]
                df.at[idx, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = df.at[idx, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] - qty
                sheet.update_cell(idx + 2, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠") + 1, df.at[idx, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"])
                sales_sheet.append_row([now, name, qty, product["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"], product["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"],
                                        qty * product["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"], qty * product["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"],
                                        qty * (product["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] - product["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"])])
            except Exception as e:
                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    st.session_state.cart = {}
    st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    st.experimental_rerun()
