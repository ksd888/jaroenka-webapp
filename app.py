import streamlit as st
import datetime
from pytz import timezone
import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
import matplotlib.pyplot as plt
import time
import numpy as np
import logging

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

ice_types = ["‡πÇ‡∏°‡πà", "‡∏´‡∏•‡∏≠‡∏î‡πÉ‡∏´‡∏ç‡πà", "‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡πá‡∏Å", "‡∏Å‡πâ‡∏≠‡∏ô"]

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô CSS
st.markdown("""
<style>
/* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏ß ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏î‡∏≥‡πÄ‡∏Ç‡πâ‡∏° */
body, .main, .block-container {
    background-color: #ffffff !important;
    color: #000000 !important;
    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
}

/* ‡∏õ‡∏∏‡πà‡∏° */
.stButton > button {
    color: white !important;
    background-color: #007aff !important;
    font-weight: bold;
    border: none;
    border-radius: 10px;
    padding: 0.5em 1.2em;
    font-size: 16px;
    transition: all 0.3s ease;
}
.stButton > button:hover {
    background-color: #0062cc !important;
    transform: scale(1.02);
}

/* Input */
input, textarea, .stTextInput > div > div > input, .stNumberInput input {
    background-color: #f2f2f7 !important;
    color: #000000 !important;
    font-weight: bold !important;
    font-size: 18px;
    border-radius: 8px !important;
    padding: 10px !important;
}

/* Custom Checkbox UI */
.stCheckbox > div {
    display: flex;
    align-items: center;
}
.stCheckbox input[type="checkbox"] {
    display: none;
}
.stCheckbox > div > label {
    position: relative;
    padding-left: 28px;
    cursor: pointer;
    font-size: 18px;
    color: #000000 !important;
    font-weight: bold;
}
.stCheckbox > div > label::before {
    content: "";
    position: absolute;
    left: 0;
    top: 2px;
    width: 20px;
    height: 20px;
    border: 2px solid #000;
    background-color: white;
    border-radius: 4px;
}
.stCheckbox input[type="checkbox"]:checked + label::before {
    background-color: #007aff;
    border-color: #007aff;
}
.stCheckbox input[type="checkbox"]:checked + label::after {
    content: "‚úì";
    position: absolute;
    left: 5px;
    top: 0px;
    font-size: 16px;
    color: white;
    font-weight: bold;
}

/* Alert ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î */
.stMarkdown span[style*="color:red"] {
    font-size: 20px !important;
    font-weight: bold !important;
    padding: 5px;
    border-radius: 5px;
}

/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */
.css-1kyxreq {
    background-color: #f9f9f9 !important;
    border-radius: 10px !important;
    padding: 15px !important;
    margin-bottom: 15px !important;
}

/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á */
.ice-box {
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    padding: 15px;
    margin-bottom: 15px;
    background-color: #f8f9fa;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

/* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á */
.ice-header {
    font-size: 18px;
    font-weight: bold;
    color: #2c3e50;
    margin-bottom: 10px;
    border-bottom: 2px solid #007aff;
    padding-bottom: 5px;
}

/* ‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á */
.ice-metric {
    background-color: white;
    border-radius: 10px;
    padding: 10px;
    margin: 5px 0;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

/* ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á */
.ice-button {
    width: 100%;
    margin: 5px 0;
}

/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å */
.stock-low {
    color: #e74c3c;
    font-weight: bold;
}
.stock-ok {
    color: #27ae60;
    font-weight: bold;
}
.stock-high {
    color: #2980b9;
    font-weight: bold;
}
</style>
""", unsafe_allow_html=True)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏•‡∏∞‡∏•‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
def reset_ice_input_states():
    """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å"""
    for key in list(st.session_state.keys()):
        if any(k in key for k in ["‡πÄ‡∏Ç‡πâ‡∏≤_", "‡∏≠‡∏≠‡∏Å_", "‡∏•‡∏∞‡∏•‡∏≤‡∏¢_"]):
            st.session_state[key] = 0

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∞‡∏™‡∏°
def calculate_ice_totals(df_ice):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡πÑ‡∏£‡∏à‡∏≤‡∏Å DataFrame ‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"""
    try:
        df_ice["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = df_ice["‡πÄ‡∏Ç‡πâ‡∏≤"] - df_ice["‡∏≠‡∏≠‡∏Å"] - df_ice["‡∏•‡∏∞‡∏•‡∏≤‡∏¢"]
        df_ice["‡∏Å‡∏≥‡πÑ‡∏£"] = (df_ice["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] - df_ice["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"]) * df_ice["‡∏≠‡∏≠‡∏Å"]
        total_profit = df_ice["‡∏Å‡∏≥‡πÑ‡∏£"].sum()
        return df_ice, total_profit
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á: {str(e)}")
        logger.error(f"Error calculating ice totals: {e}")
        return df_ice, 0

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô session state
def initialize_session_state():
    """Initialize all required session state variables"""
    default_values = {
        'page': "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        'cart': [],
        'quantities': {},
        'paid_input': 0.0,
        'last_paid_click': 0,
        'reset_search_items': False,
        'prev_paid_input': 0.0,
        'last_update': time.time(),
        'force_rerun': False
    }
    
    for key, value in default_values.items():
        if key not in st.session_state:
            st.session_state[key] = value

initialize_session_state()

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
@st.cache_resource
def connect_google_sheets():
    """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheets API"""
    try:
        if 'GCP_SERVICE_ACCOUNT' not in st.secrets:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÉ‡∏ô secrets")
            logger.error("Google Sheets connection info not found in secrets")
            return None
            
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive"
        ]
        credentials = Credentials.from_service_account_info(
            st.secrets["GCP_SERVICE_ACCOUNT"],
            scopes=scope
        )
        gc = gspread.authorize(credentials)
        logger.info("Connected to Google Sheets successfully")
        return gc
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets: {str(e)}")
        logger.error(f"Error connecting to Google Sheets: {e}")
        return None

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
@st.cache_data(ttl=60)
def load_and_clean_data():
    """‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Google Sheets"""
    try:
        gc = connect_google_sheets()
        if not gc:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet ‡πÑ‡∏î‡πâ")
            return pd.DataFrame()
            
        sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
        worksheet = sheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
        df = pd.DataFrame(worksheet.get_all_records())
        
        if df.empty:
            return pd.DataFrame()
            
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] = df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].str.strip()
        numeric_cols = ["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô", "‡πÄ‡∏Ç‡πâ‡∏≤", "‡∏≠‡∏≠‡∏Å", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]
        for col in numeric_cols:
            df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0)
            
        logger.info("Loaded and cleaned product data successfully")
        return df
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
        logger.error(f"Error loading product data: {e}")
        return pd.DataFrame()

# Helper functions
def safe_key(text):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
    return text.replace(" ", "_").replace(".", "_").replace("/", "_").lower()

def safe_int(val):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô integer ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        return int(float(val))
    except:
        return 0

def safe_float(val):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô float ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        return float(val)
    except:
        return 0.0

def increase_quantity(p):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"""
    if p in st.session_state.quantities:
        st.session_state.quantities[p] += 1
    else:
        st.session_state.quantities[p] = 1

def decrease_quantity(p):
    """‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"""
    if p in st.session_state.quantities:
        st.session_state.quantities[p] = max(1, st.session_state.quantities[p] - 1)
    else:
        st.session_state.quantities[p] = 1

def add_money(amount: int):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡πà‡∏≤‡∏¢"""
    try:
        current = float(st.session_state.get('paid_input', 0.0))
        st.session_state.paid_input = current + amount
        st.session_state.last_paid_click = amount
        st.session_state.prev_paid_input = current + amount
    except Exception as e:
        st.error(f"Error adding money: {str(e)}")
        logger.error(f"Error adding money: {e}")

# ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
st.markdown("### üöÄ ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
col1, col2, col3 = st.columns(3)
with col1:
    if st.button("üè™ ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
        st.session_state.page = "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
        st.rerun()
with col2:
    if st.button("üßä ‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"):
        st.session_state.page = "‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"
        st.rerun()
with col3:
    if st.button("üìä Dashboard"):
        st.session_state.page = "Dashboard"
        st.rerun()

now = datetime.datetime.now(timezone("Asia/Bangkok")).strftime("%Y-%m-%d %H:%M:%S")

# ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
if st.session_state.page == "Dashboard":
    st.title("üìä Dashboard ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
    @st.cache_data(ttl=60)
    def load_sales_data():
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Google Sheets"""
        try:
            gc = connect_google_sheets()
            if not gc:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet ‡πÑ‡∏î‡πâ")
                return pd.DataFrame()
                
            sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
            summary_ws = sheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
            sales_df = pd.DataFrame(summary_ws.get_all_records())
            
            if sales_df.empty:
                return pd.DataFrame()
                
            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            sales_df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'] = pd.to_datetime(sales_df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'], errors='coerce')
            sales_df['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'] = sales_df['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'].astype(str)
            sales_df['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'] = pd.to_numeric(sales_df['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'], errors='coerce').fillna(0)
            sales_df['‡∏Å‡∏≥‡πÑ‡∏£'] = pd.to_numeric(sales_df['‡∏Å‡∏≥‡πÑ‡∏£'], errors='coerce').fillna(0)
            sales_df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'] = sales_df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'].astype(str)
            
            logger.info("Loaded sales data successfully")
            return sales_df
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: {str(e)}")
            logger.error(f"Error loading sales data: {e}")
            return pd.DataFrame()

    sales_df = load_sales_data()
    
    if not sales_df.empty:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
        col1, col2, col3 = st.columns(3)
        with col1:
            total_sales = sales_df['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'].sum()
            st.metric("üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{total_sales:,.2f} ‡∏ö‡∏≤‡∏ó")
        with col2:
            total_profit = sales_df['‡∏Å‡∏≥‡πÑ‡∏£'].sum()
            st.metric("üü¢ ‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°", f"{total_profit:,.2f} ‡∏ö‡∏≤‡∏ó")
        with col3:
            avg_sale = total_sales / len(sales_df) if len(sales_df) > 0 else 0
            st.metric("üìä ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", f"{avg_sale:,.2f} ‡∏ö‡∏≤‡∏ó")
        
        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
        st.subheader("üìà ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        try:
            daily_sales = sales_df.groupby(sales_df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'].dt.date)['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'].sum().reset_index()
            
            fig, ax = plt.subplots(figsize=(10, 5))
            ax.plot(daily_sales['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'], daily_sales['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'], marker='o', color='#007aff')
            ax.set_title('‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô')
            ax.set_xlabel('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà')
            ax.set_ylabel('‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)')
            ax.grid(True)
            st.pyplot(fig)
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü: {str(e)}")
            logger.error(f"Error creating sales chart: {e}")
        
        # ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ
        st.subheader("üèÜ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ")
        try:
            if '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' in sales_df.columns:
                top_products = sales_df['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'].value_counts().head(10)
                st.bar_chart(top_products)
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ: {str(e)}")
            logger.error(f"Error showing top products: {e}")
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")

# ‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
elif st.session_state.page == "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
    st.title("üßÉ ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
    
    df = load_and_clean_data()
    if df.empty:
        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ")
        st.stop()
    
    product_names = df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist()
    
    # ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    search_term = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", help="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", key="search_term")
    filtered_products = [p for p in product_names if search_term.lower() in p.lower()] if search_term else product_names
    
    selected_product = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", [""] + filtered_products, key="product_select")
    
    if selected_product:
        if selected_product not in st.session_state.quantities:
            st.session_state.quantities[selected_product] = 1
        
        qty = st.session_state.quantities[selected_product]
        row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == selected_product]
        stock = int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"].values[0]) if not row.empty else 0
        
        st.markdown(f"**{selected_product}**")
        col1, col2, col3, col4 = st.columns([1, 1, 1, 2])
        with col1: 
            st.button("‚ûñ", key=f"dec_{safe_key(selected_product)}", on_click=decrease_quantity, args=(selected_product,))
        with col2: 
            st.markdown(f"<div style='text-align:center; font-size:24px'>{qty}</div>", unsafe_allow_html=True)
        with col3: 
            st.button("‚ûï", key=f"inc_{safe_key(selected_product)}", on_click=increase_quantity, args=(selected_product,))
        with col4:
            stock_color = "red" if stock < 3 else "green"
            st.markdown(f"<span style='color:{stock_color}; font-size:18px; font-weight:bold'>üì¶ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {stock} ‡∏ä‡∏¥‡πâ‡∏ô</span>", unsafe_allow_html=True)

        if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", type="primary", key="add_to_cart"):
            qty = safe_int(st.session_state.quantities[selected_product])
            if qty > 0:
                if stock >= qty:
                    st.session_state.cart.append((selected_product, qty))
                    st.success("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
                    st.session_state.quantities[selected_product] = 1
                    st.rerun()
                else:
                    st.error(f"‚ö†Ô∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {stock} ‡∏ä‡∏¥‡πâ‡∏ô)")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
    total_price, total_profit = 0, 0
    
    if not st.session_state.cart:
        st.info("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤")
    else:
        for idx, (item, qty) in enumerate(st.session_state.cart):
            row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item]
            if not row.empty:
                row = row.iloc[0]
                price, cost = safe_float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]), safe_float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"])
                subtotal, profit = qty * price, qty * (price - cost)
                total_price += subtotal
                total_profit += profit
                
                col1, col2 = st.columns([4, 1])
                with col1:
                    st.write(f"- {item} x {qty} = {subtotal:.2f} ‡∏ö‡∏≤‡∏ó")
                with col2:
                    if st.button("üóëÔ∏è", key=f"remove_{idx}"):
                        st.session_state.cart.pop(idx)
                        st.rerun()

    # ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
    st.subheader("üí∞ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
    paid_input = st.number_input(
        "‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", 
        value=float(st.session_state.get('paid_input', 0.0)), 
        step=1.0,
        min_value=0.0,
        key="paid_input_widget"
    )

    # Update session state only if the value changed
    if paid_input != st.session_state.prev_paid_input:
        try:
            st.session_state.paid_input = paid_input
            st.session_state.prev_paid_input = paid_input
        except Exception as e:
            st.error(f"Error updating payment amount: {str(e)}")
            logger.error(f"Error updating payment: {e}")
    
    # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πà‡∏ß‡∏ô
    st.write("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πà‡∏ß‡∏ô:")
    col1, col2, col3 = st.columns(3)
    with col1: st.button("20", on_click=lambda: add_money(20), key="add_20")
    with col2: st.button("50", on_click=lambda: add_money(50), key="add_50")
    with col3: st.button("100", on_click=lambda: add_money(100), key="add_100")
    col4, col5 = st.columns(2)
    with col4: st.button("500", on_click=lambda: add_money(500), key="add_500")
    with col5: st.button("1000", on_click=lambda: add_money(1000), key="add_1000")
    
    if st.session_state.last_paid_click:
        if st.button(f"‚ûñ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å {st.session_state.last_paid_click}", key="cancel_last"):
            try:
                st.session_state.paid_input -= st.session_state.last_paid_click
                st.session_state.prev_paid_input = st.session_state.paid_input
                st.session_state.last_paid_click = 0
                st.rerun()
            except Exception as e:
                st.error(f"Error canceling last payment: {str(e)}")
                logger.error(f"Error canceling payment: {e}")

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î
    st.info(f"üì¶ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total_price:,.2f} ‡∏ö‡∏≤‡∏ó | üü¢ ‡∏Å‡∏≥‡πÑ‡∏£: {total_profit:,.2f} ‡∏ö‡∏≤‡∏ó")
    if st.session_state.paid_input >= total_price:
        st.success(f"üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {st.session_state.paid_input - total_price:,.2f} ‡∏ö‡∏≤‡∏ó")
    else:
        st.warning(f"üí∏ ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ (‡∏Ç‡∏≤‡∏î: {total_price - st.session_state.paid_input:,.2f} ‡∏ö‡∏≤‡∏ó)")

    # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
    if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢", type="primary", disabled=not st.session_state.cart, key="confirm_sale"):
        try:
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢..."):
                gc = connect_google_sheets()
                if not gc:
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet ‡πÑ‡∏î‡πâ")
                    return
                    
                sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
                worksheet = sheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
                summary_ws = sheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                for item, qty in st.session_state.cart:
                    index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item].index[0]
                    row = df.loc[index]
                    idx_in_sheet = index + 2
                    new_out = safe_int(row["‡∏≠‡∏≠‡∏Å"]) + qty
                    new_left = safe_int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]) - qty
                    
                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÉ‡∏ô Google Sheets
                    worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏≠‡∏≠‡∏Å") + 1, new_out)
                    worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ") + 1, new_left)

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
                summary_ws.append_row([
                    now,
                    ", ".join([f"{i} x {q}" for i, q in st.session_state.cart]),
                    total_price,
                    total_profit,
                    st.session_state.paid_input,
                    st.session_state.paid_input - total_price,
                    "drink"
                ])
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô cache
                st.cache_data.clear()
                
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                st.session_state.cart = []
                st.session_state.paid_input = 0.0
                st.session_state.prev_paid_input = 0.0
                st.session_state.last_paid_click = 0
                
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                logger.info(f"Sale recorded: {total_price} THB, Profit: {total_profit} THB")
                time.sleep(1)
                st.rerun()
        except Exception as e:
            st.error(f"Error confirming sale: {str(e)}")
            logger.error(f"Error confirming sale: {e}")

    # ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    with st.expander("üì¶ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", expanded=False):
        tab1, tab2, tab3 = st.tabs(["‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î"])
        
        with tab1:
            restock_item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", product_names, key="restock_select")
            restock_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°", min_value=1, step=1, key="restock_qty")
            if st.button("üì• ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", key="confirm_restock"):
                try:
                    index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == restock_item].index[0]
                    idx_in_sheet = index + 2
                    row = df.loc[index]
                    new_in = safe_int(row["‡πÄ‡∏Ç‡πâ‡∏≤"]) + restock_qty
                    new_left = safe_int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]) + restock_qty
                    
                    gc = connect_google_sheets()
                    if not gc:
                        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet ‡πÑ‡∏î‡πâ")
                        return
                        
                    sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
                    worksheet = sheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
                    
                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡πÄ‡∏Ç‡πâ‡∏≤") + 1, new_in)
                    worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ") + 1, new_left)
                    
                    st.success(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° {restock_item} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {restock_qty} ‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                    logger.info(f"Restocked: {restock_item} x {restock_qty}")
                    
                    st.cache_data.clear()
                    st.rerun()
                except Exception as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {str(e)}")
                    logger.error(f"Error restocking: {e}")
        
        with tab2:
            edit_item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", product_names, key="edit_select")
            index = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == edit_item].index[0]
            idx_in_sheet = index + 2
            row = df.loc[index]
            
            col1, col2 = st.columns(2)
            with col1:
                new_price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢", value=safe_float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]), key="edit_price")
            with col2:
                new_cost = st.number_input("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô", value=safe_float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]), key="edit_cost")
            
            new_stock = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ", value=safe_int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"]), key="edit_stock", step=1)
            
            if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", key="save_edit"):
                try:
                    gc = connect_google_sheets()
                    if not gc:
                        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet ‡πÑ‡∏î‡πâ")
                        return
                        
                    sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
                    worksheet = sheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
                    
                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢") + 1, new_price)
                    worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô") + 1, new_cost)
                    worksheet.update_cell(idx_in_sheet, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ") + 1, new_stock)
                    
                    st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {edit_item} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                    logger.info(f"Updated product: {edit_item}")
                    
                    st.cache_data.clear()
                    st.rerun()
                except Exception as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {str(e)}")
                    logger.error(f"Error updating product: {e}")
        
        with tab3:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏¢‡∏≠‡∏î '‡πÄ‡∏Ç‡πâ‡∏≤' ‡πÅ‡∏•‡∏∞ '‡∏≠‡∏≠‡∏Å' ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
            if st.button("üîÅ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)", type="secondary", key="reset_counts"):
                try:
                    gc = connect_google_sheets()
                    if not gc:
                        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet ‡πÑ‡∏î‡πâ")
                        return
                        
                    sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
                    worksheet = sheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
                    num_rows = len(df)
                    
                    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö batch
                    worksheet.batch_update([
                        {"range": f"E2:E{num_rows+1}", "values": [[0]] * num_rows},
                        {"range": f"G2:G{num_rows+1}", "values": [[0]] * num_rows}
                    ])
                    
                    st.success("‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î '‡πÄ‡∏Ç‡πâ‡∏≤' ‡πÅ‡∏•‡∏∞ '‡∏≠‡∏≠‡∏Å' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà")
                    logger.info("Reset product counts for new day")
                    
                    st.cache_data.clear()
                    st.rerun()
                except Exception as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î: {str(e)}")
                    logger.error(f"Error resetting counts: {e}")

elif st.session_state.page == "‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á":
    def reset_ice_session_state():
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å"""
        for ice_type in ice_types:
            st.session_state.pop(f"in_{ice_type}", None)
            st.session_state.pop(f"sell_out_{ice_type}", None)
        st.session_state["force_rerun"] = True

    st.title("üßä ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
    
    @st.cache_data(ttl=60)
    def load_ice_data():
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡∏à‡∏≤‡∏Å Google Sheets"""
        try:
            gc = connect_google_sheets()
            if not gc:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet ‡πÑ‡∏î‡πâ")
                return pd.DataFrame()
                
            sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
            iceflow_sheet = sheet.worksheet("iceflow")
            records = iceflow_sheet.get_all_records()
            
            if not records:
                return pd.DataFrame()
                
            df_ice = pd.DataFrame(records)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            required_cols = ["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢", "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"]
            for col in required_cols:
                if col not in df_ice.columns:
                    df_ice[col] = 0  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 0
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
            if "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" not in df_ice.columns:
                df_ice["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = datetime.datetime.now(timezone("Asia/Bangkok")).strftime("%-d/%-m/%Y")
            
            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"] = df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"].astype(str).str.strip().str.lower()
            numeric_cols = ["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢", "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"]
            for col in numeric_cols:
                df_ice[col] = pd.to_numeric(df_ice[col], errors='coerce').fillna(0)
            
            logger.info("Loaded ice data successfully")
            return df_ice
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á: {str(e)}")
            logger.error(f"Error loading ice data: {e}")
            return pd.DataFrame()

    df_ice = load_ice_data()
    
    if df_ice.empty:
        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
        st.stop()
    
    today_str = datetime.datetime.now(timezone("Asia/Bangkok")).strftime("%-d/%-m/%Y")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
    if not df_ice.empty and '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' in df_ice.columns and df_ice["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].iloc[0] != today_str:
        try:
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà..."):
                gc = connect_google_sheets()
                if not gc:
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet ‡πÑ‡∏î‡πâ")
                    return
                    
                sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
                iceflow_sheet = sheet.worksheet("iceflow")
                
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                df_ice["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = today_str
                df_ice["‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"] = 0
                df_ice["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"] = 0
                df_ice["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"] = 0
                df_ice["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô"] = 0
                df_ice["‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°"] = 0
                df_ice["‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥"] = 0
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Google Sheets
                iceflow_sheet.update([df_ice.columns.tolist()] + df_ice.values.tolist())
                
                st.info("üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")
                logger.info("Reset ice data for new day")
                
                reset_ice_session_state()
                st.cache_data.clear()
                time.sleep(1)
                st.rerun()
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
            logger.error(f"Error resetting ice data: {e}")
    
    # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
    initial_sales = {}
    for ice_type in ice_types:
        row = df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"].str.contains(ice_type, na=False)]
        if not row.empty:
            idx = row.index[0]
            initial_sales[ice_type] = safe_int(df_ice.at[idx, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"])

    # ‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á
    st.markdown("### üì¶ ‡πÇ‡∏ã‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á")
    cols = st.columns(4)

    for i, ice_type in enumerate(ice_types):
        row = df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"].str.contains(ice_type, na=False)]
        if not row.empty:
            idx = row.index[0]
            default_val = safe_int(df_ice.at[idx, "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"])
            received = safe_int(df_ice.at[idx, "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"])
            sold = safe_int(df_ice.at[idx, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"])
            melted = safe_int(df_ice.at[idx, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"])
            remaining = received - sold - melted
            
            with cols[i]:
                st.markdown(f"""
                <div class="ice-box">
                    <div class="ice-header">‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á{ice_type}</div>
                    <div class="ice-metric">
                        <div>üì• ‡∏¢‡∏≠‡∏î‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤: <strong>{received}</strong> ‡∏ñ‡∏∏‡∏á</div>
                        <div class="{'stock-low' if remaining < 5 else 'stock-ok' if remaining < 15 else 'stock-high'}">
                            üì¶ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: <strong>{remaining}</strong> ‡∏ñ‡∏∏‡∏á
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                added_value = st.number_input(
                    f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ {ice_type}", 
                    min_value=0, 
                    step=1, 
                    key=f"increase_{ice_type}",
                    help=f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á{ice_type}‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"
                )

                if added_value > 0:
                    new_total = default_val + added_value
                    df_ice.at[idx, "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"] = new_total
                    st.success(f"‚úÖ ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô {new_total} ‡∏ñ‡∏∏‡∏á")
                else:
                    df_ice.at[idx, "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"] = default_val

  if st.button("üì• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á", type="primary", key="unique_btn_save_restock_ice"):
    try:
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
            gc = connect_google_sheets()
            if not gc:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet ‡πÑ‡∏î‡πâ")
                st.stop()
            
            sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
            iceflow_sheet = sheet.worksheet("iceflow")
            iceflow_sheet.update([df_ice.columns.tolist()] + df_ice.values.tolist())
            reset_ice_session_state()
            st.cache_data.clear()
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏•‡πâ‡∏ß")
            time.sleep(1)
            st.rerun()
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
        
    # ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á
    st.markdown("### üí∏ ‡πÇ‡∏ã‡∏ô‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á")
    total_income = 0
    total_profit = 0

    if not df_ice.empty and '‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á' in df_ice.columns:
        cols = st.columns(4)
        
        for i, ice_type in enumerate(ice_types):
            row = df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"].str.contains(ice_type, na=False)]
            if not row.empty:
                idx = row.index[0]
                price_per_bag = safe_float(df_ice.at[idx, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
                cost_per_bag = safe_float(df_ice.at[idx, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
                current_sold = safe_int(df_ice.at[idx, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"])
                stock_decrease = 0  # Initialize

                with cols[i]:
                    st.markdown(f"""
                    <div class="ice-box">
                        <div class="ice-header">‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á{ice_type}</div>
                        <div class="ice-metric">
                            <div>üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: <strong>{price_per_bag:,.2f}</strong> ‡∏ö‡∏≤‡∏ó/‡∏ñ‡∏∏‡∏á</div>
                            <div>üì§ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: <strong>{current_sold}</strong> ‡∏ñ‡∏∏‡∏á</div>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏ñ‡∏∏‡∏á
                    full_bag_sold = st.number_input(
                        f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å {ice_type} (‡πÄ‡∏ï‡πá‡∏°‡∏ñ‡∏∏‡∏á)", 
                        min_value=0, 
                        step=1, 
                        key=f"add_sell_{ice_type}",
                        help=f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á{ice_type}‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏ñ‡∏∏‡∏á"
                    )
                    
                    # ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ö‡∏≤‡∏ó
                    st.markdown("<div style='margin-top:10px;'>‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡∏≤‡∏¢:</div>", unsafe_allow_html=True)
                    divided_amount = st.selectbox(
                        f"‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡∏≤‡∏¢ {ice_type} (‡∏ö‡∏≤‡∏ó)",
                        [0, 5, 10, 20, 30, 40],
                        key=f"divided_{ice_type}"
                    )
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡πÑ‡∏£
                    if full_bag_sold > 0 or divided_amount > 0:
                        # ‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏ñ‡∏∏‡∏á
                        income = full_bag_sold * price_per_bag
                        profit = full_bag_sold * (price_per_bag - cost_per_bag)
                        
                        # ‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á
                        if divided_amount > 0:
                            if ice_type == "‡∏Å‡πâ‡∏≠‡∏ô":
                                # ‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡∏Å‡πâ‡∏≠‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡∏≤‡∏¢‡∏Å‡πâ‡∏≠‡∏ô‡∏•‡∏∞ 5 ‡∏ö‡∏≤‡∏ó (1 ‡∏ñ‡∏∏‡∏á‡∏°‡∏µ 10 ‡∏Å‡πâ‡∏≠‡∏ô)
                                pieces_sold = divided_amount / 5
                                divided_income = divided_amount
                                divided_profit = divided_amount - (pieces_sold * (cost_per_bag / 10))
                                stock_decrease = pieces_sold / 10  # 1 ‡∏ñ‡∏∏‡∏á = 10 ‡∏Å‡πâ‡∏≠‡∏ô
                            else:
                                # ‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
                                divided_income = divided_amount
                                stock_decrease = divided_amount / price_per_bag
                                divided_profit = divided_amount - (stock_decrease * cost_per_bag)
                            
                            income += divided_income
                            profit += divided_profit
                        
                        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô DataFrame
                        df_ice.at[idx, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"] = current_sold + full_bag_sold + stock_decrease
                        df_ice.at[idx, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô"] = safe_int(df_ice.at[idx, "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"]) - df_ice.at[idx, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"] - safe_int(df_ice.at[idx, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"])
                        df_ice.at[idx, "‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°"] = income
                        df_ice.at[idx, "‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥"] = profit
                        
                        total_income += income
                        total_profit += profit

   if st.button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á", type="primary", key="save_ice_sale"):
    try:
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢..."):
            gc = connect_google_sheets()
            if not gc:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet ‡πÑ‡∏î‡πâ")
                st.stop()
                
            sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
            iceflow_sheet = sheet.worksheet("iceflow")
            summary_ws = sheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ int64/float64 ‡πÄ‡∏õ‡πá‡∏ô int/float ‡∏õ‡∏Å‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            df_ice = df_ice.applymap(lambda x: int(x) if isinstance(x, (np.int64, np.float64)) and x == x else x)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á
            iceflow_sheet.update([df_ice.columns.tolist()] + df_ice.values.tolist())
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
            for ice_type in ice_types:
                row = df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"].str.contains(ice_type, na=False)]
                if not row.empty:
                    idx = row.index[0]
                    current_sold = safe_int(df_ice.at[idx, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"])
                    sold_in_this_session = max(0, current_sold - initial_sales.get(ice_type, 0))
                    
                    if sold_in_this_session > 0:
                        summary_ws.append_row([
                            today_str,
                            f"{ice_type} (‡∏Ç‡∏≤‡∏¢ {sold_in_this_session:.2f} ‡∏ñ‡∏∏‡∏á)",
                            float(sold_in_this_session),
                            float(df_ice.at[idx, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"]),
                            float(df_ice.at[idx, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"]),
                            "ice"
                        ])
            
            reset_ice_session_state()
            st.cache_data.clear()
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            time.sleep(1)
            st.rerun()
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
        logger.error(f"Error saving ice sale: {e}")
    # ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏∞‡∏•‡∏≤‡∏¢
    st.markdown("### üßä ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏∞‡∏•‡∏≤‡∏¢")
    melted_cols = st.columns(4)
    
    for i, ice_type in enumerate(ice_types):
    row = df_ice[df_ice["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"].str.contains(ice_type, na=False)]
    if not row.empty:
        idx = row.index[0]
        with melted_cols[i]:
            melted_qty = st.number_input(
                f"‡∏•‡∏∞‡∏•‡∏≤‡∏¢ {ice_type}", 
                min_value=0, 
                value=safe_int(df_ice.at[idx, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"]),
                key=f"melted_{ice_type}"
            )
            df_ice.at[idx, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"] = melted_qty
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô
            df_ice.at[idx, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô"] = safe_int(df_ice.at[idx, "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"]) - safe_int(df_ice.at[idx, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"]) - melted_qty
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
    st.markdown("### üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{total_income:,.2f} ‡∏ö‡∏≤‡∏ó")
    with col2:
        st.metric("üü¢ ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥", f"{total_profit:,.2f} ‡∏ö‡∏≤‡∏ó")
