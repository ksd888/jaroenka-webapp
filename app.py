import streamlit as st
import pandas as pd
import datetime
import gspread
from google.oauth2 import service_account
from reportlab.pdfgen import canvas
from io import BytesIO
import base64

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet
SPREADSHEET_ID = "1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE"
credentials = service_account.Credentials.from_service_account_info(
    st.secrets["GCP_SERVICE_ACCOUNT"],
    scopes=[
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
)
gc = gspread.authorize(credentials)
spreadsheet = gc.open_by_key(SPREADSHEET_ID)
sheet_main = spreadsheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
sheet_sales = spreadsheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
sheet_meta = spreadsheet.worksheet("Meta")

# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
now_date = datetime.datetime.now().strftime("%Y-%m-%d")
try:
    last_date = sheet_meta.acell("B1").value
except:
    sheet_meta.update("A1", "last_date")
    last_date = ""
if last_date != now_date:
    data = pd.DataFrame(sheet_main.get_all_records())
    data["‡πÄ‡∏Ç‡πâ‡∏≤"] = 0
    data["‡∏≠‡∏≠‡∏Å"] = 0
    sheet_main.update([data.columns.values.tolist()] + data.values.tolist())
    sheet_meta.update("B1", now_date)

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
data = pd.DataFrame(sheet_main.get_all_records())
data["‡πÄ‡∏Ç‡πâ‡∏≤"] = pd.to_numeric(data["‡πÄ‡∏Ç‡πâ‡∏≤"], errors="coerce").fillna(0).astype(int)
data["‡∏≠‡∏≠‡∏Å"] = pd.to_numeric(data["‡∏≠‡∏≠‡∏Å"], errors="coerce").fillna(0).astype(int)
data["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"] = pd.to_numeric(data["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"], errors="coerce").fillna(0).astype(int)
data["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] = pd.to_numeric(data["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"], errors="coerce").fillna(0)
data["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"] = pd.to_numeric(data["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"], errors="coerce").fillna(0)

# ‚úÖ UI
st.set_page_config(page_title="‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤", layout="wide")
st.title("üßä ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô - ‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")

# ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
st.subheader("üõí ‡∏Ç‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
selected_items = st.multiselect("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", options=data["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist())
quantities = {}
for item in selected_items:
    qty = st.number_input(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {item}", min_value=0, step=1, key=f"qty_{item}")
    quantities[item] = qty

cash_received = st.number_input("üíµ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)", min_value=0.0, step=1.0, format="%.2f")

if st.button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
    total = 0
    profit_total = 0
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    lines = []

    for item, qty in quantities.items():
        if qty > 0:
            idx = data[data["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item].index[0]
            price = data.at[idx, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]
            cost = data.at[idx, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
            profit = (price - cost) * qty
            total += price * qty
            profit_total += profit
            data.at[idx, "‡∏≠‡∏≠‡∏Å"] += qty
            sheet_sales.append_row([
                now, item, int(qty), float(price), float(cost),
                float(price - cost), float(profit)
            ])
            lines.append(f"{item} x{qty} = {price * qty:.2f} ‡∏ö‡∏≤‡∏ó")

    change = cash_received - total
    st.success(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:.2f} ‡∏ö‡∏≤‡∏ó | ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")
    st.info(f"‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°: {profit_total:.2f} ‡∏ö‡∏≤‡∏ó")
    sheet_main.update([data.columns.values.tolist()] + data.values.tolist())

    # ‚úÖ ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
    receipt = BytesIO()
    c = canvas.Canvas(receipt)
    c.setFont("Helvetica", 12)
    c.drawString(100, 800, "üßæ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à - ‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
    y = 770
    for line in lines:
        c.drawString(100, y, line)
        y -= 20
    c.drawString(100, y - 20, f"‡∏£‡∏ß‡∏°: {total:.2f} ‡∏ö‡∏≤‡∏ó")
    c.drawString(100, y - 40, f"‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô: {cash_received:.2f} ‡∏ö‡∏≤‡∏ó")
    c.drawString(100, y - 60, f"‡∏ó‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")
    c.save()
    receipt.seek(0)
    b64 = base64.b64encode(receipt.read()).decode()
    href = f'<a href="data:application/pdf;base64,{b64}" download="receipt.pdf">üñ®Ô∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à</a>'
    st.markdown(href, unsafe_allow_html=True)

# ‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏π‡πâ
st.subheader("‚ûï ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏π‡πâ")
item_to_add = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", data["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"], key="add")
add_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°", min_value=0, step=1, key="add_qty")
if st.button("üì¶ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
    idx = data[data["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item_to_add].index[0]
    data.at[idx, "‡πÄ‡∏Ç‡πâ‡∏≤"] += add_qty
    sheet_main.update([data.columns.values.tolist()] + data.values.tolist())
    st.success(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° {item_to_add} +{add_qty} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡πÑ‡∏£
data["‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] = data["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] - data["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]
data["‡∏Å‡∏≥‡πÑ‡∏£"] = data["‡∏≠‡∏≠‡∏Å"] * data["‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"]
total_sales = (data["‡∏≠‡∏≠‡∏Å"] * data["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]).sum()
total_profit = data["‡∏Å‡∏≥‡πÑ‡∏£"].sum()
st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
st.write(f"‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°: {total_sales:.2f} ‡∏ö‡∏≤‡∏ó")
st.write(f"‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°: {total_profit:.2f} ‡∏ö‡∏≤‡∏ó")

# ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
st.subheader("üìã ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
st.dataframe(data)
