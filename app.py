import streamlit as st
import datetime
from pytz import timezone
import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
import matplotlib.pyplot as plt

# ‚úÖ Apple Style CSS + ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
st.markdown("""
    <style>
    body, .main, .block-container {
        background-color: #ffffff !important;
        color: #000000 !important;
    }
    .stButton>button {
        color: white !important;
        background-color: #007aff !important;
        border: none;
        border-radius: 10px;
        padding: 0.5em 1.2em;
        font-weight: bold;
    }
    .stTextInput>div>div>input, .stNumberInput input, .stSelectbox div, .stMultiSelect div {
        background-color: #f2f2f7 !important;
        color: #000 !important;
        border-radius: 6px;
        font-size: 18px;
        font-weight: bold;
    }
    .st-expander, .st-expander>details {
        background-color: #f9f9f9 !important;
        color: #000000 !important;
        border-radius: 8px;
    }
    .stAlert > div {
        font-weight: bold;
        color: #000 !important;
    }
    .stAlert[data-testid="stAlert-success"] {
        background-color: #d4fcd4 !important;
        border: 1px solid #007aff !important;
    }
    .stAlert[data-testid="stAlert-info"] {
        background-color: #e6f0ff !important;
        border: 1px solid #007aff !important;
    }
    .stAlert[data-testid="stAlert-warning"] {
        background-color: #fff4d2 !important;
        border: 1px solid #ff9500 !important;
    }
    </style>
""", unsafe_allow_html=True)

# ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏ó‡∏ô Sidebar
st.markdown("### üöÄ ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
col1, col2, col3 = st.columns(3)
if "page" not in st.session_state:
    st.session_state.page = "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
with col1:
    if st.button("üè™ ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
        st.session_state.page = "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
with col2:
    if st.button("üßä ‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"):
        st.session_state.page = "‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"
with col3:
    if st.button("üìä Dashboard"):
        st.session_state.page = "Dashboard"

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤
now = datetime.datetime.now(timezone("Asia/Bangkok")).strftime("%Y-%m-%d %H:%M:%S")

# ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GCP_SERVICE_ACCOUNT"], scopes=scope)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
worksheet = sheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
summary_ws = sheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
df = pd.DataFrame(worksheet.get_all_records())

# ‚úÖ Helper functions
def safe_key(text): return text.replace(" ", "_").replace(".", "_").replace("/", "_").lower()
def safe_int(val): return int(pd.to_numeric(val, errors="coerce") or 0)
def safe_float(val): return float(pd.to_numeric(val, errors="coerce") or 0.0)
def safe_safe_int(val): 
    try: return safe_int(safe_float(val))
    except: return 0
def safe_safe_float(val): 
    try: return safe_float(val)
    except: return 0.0
def increase_quantity(p): st.session_state.quantities[p] += 1
def decrease_quantity(p): st.session_state.quantities[p] = max(1, st.session_state.quantities[p] - 1)

# ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Session
if st.session_state.get("reset_search_items"):
    st.session_state["search_items"] = []
    st.session_state["quantities"] = {}
    st.session_state["cart"] = []
    st.session_state["paid_input"] = 0.0
    st.session_state["last_paid_click"] = 0
    del st.session_state["reset_search_items"]

# ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
default_session = {
    "cart": [],
    "search_items": [],
    "quantities": {},
    "paid_input": 0.0,
    "last_paid_click": 0,
    "sale_complete": False
}
for key, default in default_session.items():
    if key not in st.session_state:
        st.session_state[key] = default

# ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
if st.session_state.page == "Dashboard":
    st.title("üìä Dashboard ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    try:
        sales_ws = sheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
        sales_data = pd.DataFrame(sales_ws.get_all_records())

        if "‡πÄ‡∏ß‡∏•‡∏≤" in sales_data.columns:
            sales_data = sales_data.rename(columns={"‡πÄ‡∏ß‡∏•‡∏≤": "timestamp"})
        else:
            st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡πÄ‡∏ß‡∏•‡∏≤' ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
            sales_data["timestamp"] = pd.NaT

        sales_data["timestamp"] = pd.to_datetime(sales_data["timestamp"], errors="coerce")
        today = datetime.datetime.now(timezone("Asia/Bangkok")).date()
        today_sales = sales_data[sales_data["timestamp"].dt.date == today]

        if not today_sales.empty:
            total_today_price = today_sales["total_price"].sum()
            total_today_profit = today_sales["total_profit"].sum()
            top_items = today_sales["Items"].value_counts().idxmax()

            st.success(f"‚úÖ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {total_today_price:.2f} ‡∏ö‡∏≤‡∏ó")
            st.info(f"üü¢ ‡∏Å‡∏≥‡πÑ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {total_today_profit:.2f} ‡∏ö‡∏≤‡∏ó")
            st.warning(f"üî• ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ: {top_items}")
        else:
            st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")

        # ‡∏Å‡∏£‡∏≤‡∏ü 14 ‡∏ß‡∏±‡∏ô
        sales_data["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = sales_data["timestamp"].dt.date
        recent_df = sales_data.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", ascending=False).head(14)
        daily_summary = recent_df.groupby("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà").agg({"total_profit": "sum", "total_price": "sum"}).sort_index()

        st.subheader("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        fig1, ax1 = plt.subplots()
        ax1.plot(daily_summary.index, daily_summary["total_profit"], marker='o')
        ax1.set_ylabel("‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡∏ö‡∏≤‡∏ó)")
        ax1.set_xlabel("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
        ax1.grid(True)
        st.pyplot(fig1)

        st.subheader("üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏° 14 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        st.metric("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{daily_summary['total_price'].sum():,.0f} ‡∏ö‡∏≤‡∏ó")
        st.metric("‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏ß‡∏°", f"{daily_summary['total_profit'].sum():,.0f} ‡∏ö‡∏≤‡∏ó")

        st.subheader("üî• ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏™‡∏∏‡∏î")
        top_day = daily_summary["total_price"].idxmax()
        top_sales = daily_summary["total_price"].max()
        st.success(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {top_day} ‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {top_sales:,.0f} ‡∏ö‡∏≤‡∏ó")

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Dashboard: {e}")

# ‚úÖ (‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ / ‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á ‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏°‡∏≤‡∏ï‡πà‡∏≠‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)
# ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
elif st.session_state.page == "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
    st.title("üßÉ ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
    st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠", df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist(), key="search_items")
    selected = st.session_state["search_items"]
    for p in selected:
        if p not in st.session_state.quantities:
            st.session_state.quantities[p] = 1
        qty = st.session_state.quantities[p]
        st.markdown(f"**{p}**")
        col1, col2, col3 = st.columns([1, 1, 1])
        with col1: st.button("‚ûñ", key=f"dec_{safe_key(p)}", on_click=decrease_quantity, args=(p,))
        with col2: st.markdown(f"<div style='text-align:center; font-size:24px'>{qty}</div>", unsafe_allow_html=True)
        with col3: st.button("‚ûï", key=f"inc_{safe_key(p)}", on_click=increase_quantity, args=(p,))
        row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == p]
        stock = int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ"].values[0]) if not row.empty else 0
        st.markdown(f"<span style='color:{'red' if stock < 3 else 'black'}; font-size:18px'>üßä ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ï‡∏π‡πâ: {stock}</span>", unsafe_allow_html=True)

# ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ "‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"
elif st.session_state.page == "‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á":
    st.title("üßä ‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á (‡πÅ‡∏¢‡∏Å‡∏´‡∏ô‡πâ‡∏≤)")
    iceflow_sheet = sheet.worksheet("iceflow")
    df_ice = pd.DataFrame(iceflow_sheet.get_all_records())
    df_ice["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] = pd.to_numeric(df_ice["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"], errors='coerce')
    df_ice["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] = pd.to_numeric(df_ice["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"], errors='coerce')
    df_ice = df_ice.dropna(subset=["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])

    today_str = datetime.datetime.now().strftime("%-d/%-m/%Y")
    if df_ice["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].iloc[0] != today_str:
        df_ice["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = today_str
        df_ice["‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"] = 0
        df_ice["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"] = 0
        df_ice["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏∞‡∏•‡∏≤‡∏¢"] = 0
        df_ice["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô"] = 0
        df_ice["‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°"] = 0
        df_ice["‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥"] = 0
        iceflow_sheet.update([df_ice.columns.tolist()] + df_ice.values.tolist())
        st.info("üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")

    updates = []
    total_income = 0
    total_profit = 0
    for i, row in df_ice.iterrows():
        name = row["‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"]
        price = float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
        cost = float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
        unit_profit = price - cost
        st.subheader(f"üíº {name}")
        in_qty = st.number_input(f"üì• ‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ {name}", min_value=0, value=int(row["‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"]), key=f"in_{i}")
        out_qty = st.number_input(f"üßä ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å {name}", min_value=0, value=int(row["‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"]), key=f"out_{i}")
        balance = in_qty - out_qty
        total = out_qty * price
        profit = out_qty * unit_profit
        df_ice.at[i, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = today_str
        df_ice.at[i, "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"] = in_qty
        df_ice.at[i, "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å"] = out_qty
        df_ice.at[i, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô"] = balance
        df_ice.at[i, "‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°"] = profit
        df_ice.at[i, "‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥"] = profit
        updates.append({
            "name": name,
            "qty": out_qty,
            "price": price,
            "cost": cost,
            "unit_profit": unit_profit,
            "total_profit": profit,
            "total_income": total
        })
        total_income += total
        total_profit += profit

    if st.button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"):
        iceflow_sheet.update([df_ice.columns.tolist()] + df_ice.values.tolist())
        for item in updates:
            summary_ws.append_row([
                today_str,
                item["name"],
                item["qty"],
                item["price"],
                item["cost"],
                item["unit_profit"],
                item["total_income"],
                item["total_profit"],
                "ice"
            ])
        st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ | ‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏° {total_income:.0f} ‡∏ö‡∏≤‡∏ó | ‡∏Å‡∏≥‡πÑ‡∏£ {total_profit:.0f} ‡∏ö‡∏≤‡∏ó")
