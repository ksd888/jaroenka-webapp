import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
from reportlab.pdfgen import canvas
import io
import base64

# Auth
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(
    st.secrets["GCP_SERVICE_ACCOUNT"],
    scopes=scope
)
gc = gspread.authorize(credentials)

# ‡πÉ‡∏ä‡πâ Spreadsheet ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
spreadsheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
sheet = spreadsheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
sheet_sales = spreadsheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
sheet_meta = spreadsheet.worksheet("Meta")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å)
now_date = datetime.now().strftime("%Y-%m-%d")
try:
    last_date = sheet_meta.acell("B1").value
except:
    last_date = ""

if last_date != now_date:
    sheet.update("F2:F", [[""]]*sheet.row_count)  # ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡πÄ‡∏Ç‡πâ‡∏≤'
    sheet.update("G2:G", [[""]]*sheet.row_count)  # ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏≠‡∏≠‡∏Å'
    sheet_meta.update("B1", [[now_date]])

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
data = sheet.get_all_records()

st.set_page_config(page_title="‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤ | ‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô", layout="wide")
st.title("üì¶ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô - ‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")

# ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
search = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "")

# ‡∏Ç‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
st.subheader("üõí ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
selected = []
quantities = {}

for item in data:
    name = item["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]
    if search.lower() in name.lower():
        col1, col2 = st.columns([3, 1])
        with col1:
            selected_item = st.checkbox(name)
        with col2:
            qty = st.number_input(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô - {name}", min_value=0, step=1, key=name)
        if selected_item and qty > 0:
            selected.append(item)
            quantities[name] = qty

if selected:
    total_price = 0
    total_cost = 0
    st.markdown("### üí∞ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≤‡∏¢")
    for item in selected:
        name = item["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]
        qty = quantities[name]
        price = float(item["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"])
        cost = float(item["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"])
        total_price += price * qty
        total_cost += cost * qty
        st.write(f"{name} x {qty} = {price * qty:.2f} ‡∏ö‡∏≤‡∏ó")

    st.markdown(f"### üíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: **{total_price:.2f} ‡∏ö‡∏≤‡∏ó**")
    cash_received = st.number_input("üí∏ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", min_value=0.0, value=total_price, step=1.0)
    change = cash_received - total_price
    st.success(f"‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")

    if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        for item in selected:
            name = item["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]
            qty = quantities[name]
            for idx, row in enumerate(data, start=2):
                if row["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == name:
                    current_out = int(row["‡∏≠‡∏≠‡∏Å"]) if row["‡∏≠‡∏≠‡∏Å"] else 0
                    new_out = current_out + qty
                    sheet.update_cell(idx, 7, str(new_out))  # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå G: ‡∏≠‡∏≠‡∏Å
                    remain = int(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]) if row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] else 0
                    sheet.update_cell(idx, 5, str(remain - qty))  # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå E: ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                    break
            sheet_sales.append_row([now, name, qty, item["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"], item["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"], total_price, total_price - total_cost, "retail"])

        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

        # PDF ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
        buffer = io.BytesIO()
        c = canvas.Canvas(buffer)
        c.drawString(100, 800, "‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à - ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
        y = 770
        for item in selected:
            name = item["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]
            qty = quantities[name]
            price = float(item["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"])
            c.drawString(100, y, f"{name} x {qty} = {price * qty:.2f} ‡∏ö‡∏≤‡∏ó")
            y -= 20
        c.drawString(100, y - 10, f"‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_price:.2f} ‡∏ö‡∏≤‡∏ó")
        c.drawString(100, y - 30, f"‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô: {cash_received:.2f} ‡∏ö‡∏≤‡∏ó")
        c.drawString(100, y - 50, f"‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")
        c.save()

        buffer.seek(0)
        b64 = base64.b64encode(buffer.read()).decode()
        href = f'<a href="data:application/pdf;base64,{b64}" download="receipt.pdf">üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à</a>'
        st.markdown(href, unsafe_allow_html=True)
