import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
import datetime

# üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
def safe_int(val):
    try:
        return int(float(val))
    except:
        return 0

def safe_float(val):
    try:
        return float(val)
    except:
        return 0.0

# üîê Auth
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GCP_SERVICE_ACCOUNT"], scopes=scope)
gc = gspread.authorize(credentials)

# üìó ‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ó
sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
ws = sheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
summary_ws = sheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")

# üìä ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df = pd.DataFrame(ws.get_all_records())

# üß† ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
if "cart" not in st.session_state: st.session_state.cart = []
if "quantities" not in st.session_state: st.session_state.quantities = {}
if "paid" not in st.session_state: st.session_state.paid = 0.0

# üõí ‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢
st.title("‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
product_names = df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].tolist()
selected = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", product_names)

for p in selected:
    if p not in st.session_state.quantities:
        st.session_state.quantities[p] = 1
    col1, col2, col3 = st.columns([3,1,1])
    with col1: st.write(p)
    with col2:
        if st.button("‚ûñ", key=f"dec_{p}"):
            st.session_state.quantities[p] = max(1, st.session_state.quantities[p] - 1)
    with col3:
        if st.button("‚ûï", key=f"inc_{p}"):
            st.session_state.quantities[p] += 1

if st.button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"):
    for p in selected:
        qty = safe_int(st.session_state.quantities[p])
        st.session_state.cart.append((p, qty))
    st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
    st.session_state.quantities = {}
    st.experimental_rerun()

# üßæ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
if st.session_state.cart:
    st.subheader("‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
    total, profit = 0, 0
    for item, qty in st.session_state.cart:
        row = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] == item].iloc[0]
        price = safe_float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"])
        cost = safe_float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"])
        total += qty * price
        profit += qty * (price - cost)
        st.write(f"{item} x {qty} = {qty * price:.2f} ‡∏ö‡∏≤‡∏ó")

    st.info(f"‡∏£‡∏ß‡∏°: {total:.2f} ‡∏ö‡∏≤‡∏ó | ‡∏Å‡∏≥‡πÑ‡∏£: {profit:.2f} ‡∏ö‡∏≤‡∏ó")
    st.session_state.paid = st.number_input("‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", value=st.session_state.paid, step=1.0)
    if st.session_state.paid >= total:
        st.success(f"‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {st.session_state.paid - total:.2f} ‡∏ö‡∏≤‡∏ó")
    else:
        st.warning("‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠")

    if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        summary_ws.append_row([
            now,
            ", ".join([f"{i} x {q}" for i, q in st.session_state.cart]),
            total,
            profit,
            st.session_state.paid,
            st.session_state.paid - total,
            "drink"
        ])
        st.session_state.cart = []
        st.session_state.paid = 0.0
        st.success("‚úÖ ‡∏Ç‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
        st.experimental_rerun()
