
import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° ===
def safe_int(value):
    try:
        return int(float(value))
    except (ValueError, TypeError):
        return 0

def safe_float(value):
    try:
        return float(value)
    except (ValueError, TypeError):
        return 0.0

# === ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet ===
scope = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]
credentials = Credentials.from_service_account_info(
    st.secrets["GCP_SERVICE_ACCOUNT"],
    scopes=scope,
)
gc = gspread.authorize(credentials)
spreadsheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
sheet = spreadsheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")

# === ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ===
data = sheet.get_all_records()
df = pd.DataFrame(data)

# === ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ safe_int ‡πÅ‡∏•‡∏∞ safe_float ===
df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"] = df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"].apply(safe_float)
df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"] = df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"].apply(safe_float)
df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].apply(safe_int)
df["‡∏≠‡∏≠‡∏Å"] = df["‡∏≠‡∏≠‡∏Å"].apply(safe_int)

# === UI ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ===
st.title("‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‚Ä¢ ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤")
search_term = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

filtered_df = df[df["‡∏ä‡∏∑‡πà‡∏≠"].str.contains(search_term, case=False, na=False)]

cart = []
for index, row in filtered_df.iterrows():
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        st.markdown(f"**{row['‡∏ä‡∏∑‡πà‡∏≠']}**")
    with col2:
        qty = st.number_input(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ({row['‡∏ä‡∏∑‡πà‡∏≠']})", min_value=0, step=1, key=f"qty_{row['‡∏ä‡∏∑‡πà‡∏≠']}")
    with col3:
        if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°", key=f"add_{row['‡∏ä‡∏∑‡πà‡∏≠']}"):
            if qty > 0:
                cart.append((row["‡∏ä‡∏∑‡πà‡∏≠"], qty, row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"], row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]))

if cart:
    st.subheader("üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
    total_price = 0
    total_cost = 0
    for name, qty, price, cost in cart:
        st.markdown(f"- {name} x {qty} = {qty * price:.2f} ‡∏ö‡∏≤‡∏ó")
        total_price += qty * price
        total_cost += qty * cost
    st.markdown(f"**‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_price:.2f} ‡∏ö‡∏≤‡∏ó**")
    st.markdown(f"**‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: {total_price - total_cost:.2f} ‡∏ö‡∏≤‡∏ó**")

    if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        for name, qty, price, cost in cart:
            idx = df[df["‡∏ä‡∏∑‡πà‡∏≠"] == name].index[0]
            old_out = safe_int(df.loc[idx, "‡∏≠‡∏≠‡∏Å"])
            sheet.update_cell(idx + 2, df.columns.get_loc("‡∏≠‡∏≠‡∏Å") + 1, old_out + qty)
            old_balance = safe_int(df.loc[idx, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"])
            sheet.update_cell(idx + 2, df.columns.get_loc("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠") + 1, max(0, old_balance - qty))
        st.success("‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üéâ")
        st.experimental_rerun()
