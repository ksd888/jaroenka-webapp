import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Key ‡∏ã‡πâ‡∏≥
def safe_key(text):
    return text.replace(" ", "_").replace(".", "_").replace("-", "_")

# ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheet
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(st.secrets["GCP_SERVICE_ACCOUNT"], scope)
gc = gspread.authorize(creds)
sheet = gc.open_by_key("1HVA9mDcDmyxfKvxQd4V5ZkWh4niq33PwVGY6gwoKnAE")
stock_ws = sheet.worksheet("‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô")
sales_ws = sheet.worksheet("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
meta_ws = sheet.worksheet("Meta")

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
df = pd.DataFrame(stock_ws.get_all_records())

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô Meta
last_date = meta_ws.acell("B1").value
now_date = datetime.now().strftime("%Y-%m-%d")
if now_date != last_date:
    stock_ws.batch_update([{
        "range": f"G2:G{len(df)+1}",  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏Ç‡πâ‡∏≤
        "values": [[0]] * len(df)
    }, {
        "range": f"H2:H{len(df)+1}",  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏≠‡∏≠‡∏Å
        "values": [[0]] * len(df)
    }])
    meta_ws.update("B1", [[now_date]])

# ‚úÖ session_state ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
if "cart" not in st.session_state:
    st.session_state.cart = {}

st.title("üßä ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

# ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
selected = st.multiselect("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠", df["‡∏ä‡∏∑‡πà‡∏≠"].tolist())

# ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
for p in selected:
    if p not in st.session_state.cart:
        st.session_state.cart[p] = 1

    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        if st.button("-", key=f"sub_{safe_key(p)}"):
            st.session_state.cart[p] = max(1, st.session_state.cart[p] - 1)
    with col2:
        st.markdown(f"**{p}** x {st.session_state.cart[p]}")
    with col3:
        if st.button("+", key=f"add_{safe_key(p)}"):
            st.session_state.cart[p] += 1

# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
st.markdown("üßæ **‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢**")
total = 0
profit = 0
for p, qty in st.session_state.cart.items():
    row = df[df["‡∏ä‡∏∑‡πà‡∏≠"] == p].iloc[0]
    price = float(row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"])
    cost = float(row["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"])
    st.write(f"- {p} x {qty} = {price*qty:.2f} ‡∏ö‡∏≤‡∏ó")
    total += price * qty
    profit += (price - cost) * qty

st.info(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:.2f} ‡∏ö‡∏≤‡∏ó | üü¢ ‡∏Å‡∏≥‡πÑ‡∏£: {profit:.2f} ‡∏ö‡∏≤‡∏ó")

# ‚úÖ ‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
paid = st.number_input("üí∞ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", min_value=0.0, step=1.0)
if paid < total:
    st.warning("üí∏ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠")
else:
    st.success(f"‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")

# ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
if st.button("üßæ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    for p, qty in st.session_state.cart.items():
        row_idx = df[df["‡∏ä‡∏∑‡πà‡∏≠"] == p].index[0] + 2  # +2 because sheet index starts at 1 with header
        stock_ws.update_cell(row_idx, 8, int(df.loc[row_idx-2, "‡∏≠‡∏≠‡∏Å"]) + qty)
        stock_ws.update_cell(row_idx, 9, int(df.loc[row_idx-2, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]) - qty)
        sales_ws.append_row([now, p, qty, float(df.loc[row_idx-2, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]),
                             float(df.loc[row_idx-2, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"]),
                             float(df.loc[row_idx-2, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]) * qty,
                             (float(df.loc[row_idx-2, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"]) - float(df.loc[row_idx-2, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"])) * qty,
                             "drink"])
    st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    st.session_state.cart = {}
    st.experimental_rerun()

# ‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
with st.expander("üì¶ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
    for p in df["‡∏ä‡∏∑‡πà‡∏≠"]:
        qty = st.number_input(f"‡πÄ‡∏ï‡∏¥‡∏° {p}", min_value=0, key=f"‡πÄ‡∏ï‡∏¥‡∏°_{safe_key(p)}")
        if qty > 0:
            row_idx = df[df["‡∏ä‡∏∑‡πà‡∏≠"] == p].index[0] + 2
            stock_ws.update_cell(row_idx, 7, int(df.loc[row_idx-2, "‡πÄ‡∏Ç‡πâ‡∏≤"]) + qty)
            stock_ws.update_cell(row_idx, 9, int(df.loc[row_idx-2, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]) + qty)
            st.success(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° {p} ‡πÅ‡∏•‡πâ‡∏ß")

# ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
with st.expander("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
    item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", df["‡∏ä‡∏∑‡πà‡∏≠"])
    col1, col2 = st.columns(2)
    with col1:
        new_price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà", value=float(df[df["‡∏ä‡∏∑‡πà‡∏≠"] == item]["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"].values[0]))
    with col2:
        new_cost = st.number_input("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÉ‡∏´‡∏°‡πà", value=float(df[df["‡∏ä‡∏∑‡πà‡∏≠"] == item]["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"].values[0]))
    if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"):
        row_idx = df[df["‡∏ä‡∏∑‡πà‡∏≠"] == item].index[0] + 2
        stock_ws.update_cell(row_idx, 3, new_price)
        stock_ws.update_cell(row_idx, 4, new_cost)
        st.success("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        st.experimental_rerun()
